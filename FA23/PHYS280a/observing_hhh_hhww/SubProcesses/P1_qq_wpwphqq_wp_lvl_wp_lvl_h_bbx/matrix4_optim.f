      SUBROUTINE SMATRIX4(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.1, 2023-07-11
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: u c > w+ w+ h d s QCD=0 QED<=5 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      Include 'genps.inc'
      Include 'maxconfigs.inc'
      Include 'nexternal.inc'
      Include 'maxamps.inc'
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=4)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=144) 
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=144) 
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      REAL*8 T
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 XTOT
      INTEGER  J, JJ

      double precision get_channel_cut
      external get_channel_cut

C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2


C     
C     INFORMATION TO WRITE THE HELICITY IN THE EVENT --not memory
C      efficient--
C     
      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_in(2)
      common /nb_hel_state/ nb_spin_state_in

      REAL*8 POL(2)

      COMMON/TO_POLARIZATION/ POL
      double precision tmin_for_channel
      integer sde_strat    !  1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      
      DATA (NHEL(I,1),I=1,10) /-1,-1, 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,2),I=1,10) /-1,-1, 1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,3),I=1,10) /-1,-1, 1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,4),I=1,10) /-1,-1, 1,-1, 1,-1, 1,-1,-1,-1/
      DATA IDEN/36/

C     ----------
C     BEGIN CODE
C     ----------

      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (multi_channel) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=1
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
C     Kiran please check if you need this:    
      DO I=1,NCOMB
        TS(I)=0d0
      ENDDO

      call MATRIX4(P ,JC(1), TS)
      DO I=1,NCOMB     
        T=TS(I)  
        DO JJ=1,nincoming
          IF(POL(JJ).NE.1d0.AND.NHEL(JJ,I).EQ.INT(SIGN(1d0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))*NB_SPIN_STATE_IN(JJ)/2d0    !  NB_SPIN_STATE(JJ)/2d0 is added for polarised beam
          ELSE IF(POL(JJ).NE.1d0)THEN
            T=T*(2d0-ABS(POL(JJ)))*NB_SPIN_STATE_IN(JJ)/2d0
          ENDIF
        ENDDO
        ANS=ANS+DABS(T)
        TS(I)=T
      ENDDO

      IF (ANS.ne.0d0) THEN
        CALL RANMAR(R)
        SUMHEL=0d0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE   
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(4, I)
          if (J.ne.0)then
            if (sde_strat.eq.1)then
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
            else
              AMP2(J) = GET_CHANNEL_CUT(P, I)
            endif
            XTOT=XTOT+AMP2(J)

          endif
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(4))/XTOT
        ELSE IF(ANS.ne.0d0) THEN
          write(*,*) 'Problem in the multi-channeling. All amp2 are'
     $     //' zero but not the total matrix-element'
          stop 1
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      Subroutine  MATRIX4(P,IC, TS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.1, 2023-07-11
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: u c > w+ w+ h d s QCD=0 QED<=5 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=144) 
      include 'genps.inc'
      include 'nexternal.inc'
      include 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=145, NCOLOR=1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=4)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      REAL*8 TS(NCOMB)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N,K
      COMPLEX*16 ZTEMP,TMP_JAMP(0)
      COMPLEX*16 TMP(6)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NCOMB,NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0d0, 0d0), (1d0, 0d0)/

      double precision fk_mdl_WH 
      double precision fk_ZERO 
      double precision fk_mdl_WW 
      double precision fk_mdl_WZ 
      save fk_mdl_WH 
      save fk_ZERO 
      save fk_mdl_WW 
      save fk_mdl_WZ 

      logical first
      data first /.true./
      save first
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX4

C     
C     GLOBAL VARIABLES
C     
      Double Precision amp2(maxamps), jamp2(0:maxflow)
      common/to_amps/  amp2,       jamp2
      include 'coupl.inc'

      double precision tmin_for_channel
      integer sde_strat    !  1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      double precision small_width_treatment
      common/narrow_width/small_width_treatment
C     
C     COLOR DATA
C     
      DATA (CF(i,  1),i=  1,  1) /2.700000000000000d+01/
C     1 T(7,8) T(9,1) T(10,2)
C     ----------
C     BEGIN CODE
C     ----------
      if (first) then
        first=.false.
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *small_width_treatment)), ZERO)
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(mdl_MB
     $   *small_width_treatment)), ZERO)
        IF(mdl_WH.ne.0d0) fk_mdl_WH = SIGN(MAX(ABS(mdl_WH), ABS(mdl_MH
     $   *small_width_treatment)), mdl_WH)
        IF(mdl_WW.ne.0d0) fk_mdl_WW = SIGN(MAX(ABS(mdl_WW), ABS(mdl_MW
     $   *small_width_treatment)), mdl_WW)
        IF(mdl_WZ.ne.0d0) fk_mdl_WZ = SIGN(MAX(ABS(mdl_WZ), ABS(mdl_MZ
     $   *small_width_treatment)), mdl_WZ)
      endif
      AMP(:,:) = (0d0,0d0)
            CALL IXXXXX(P(0,1),ZERO,-1,+1*IC(1),W(1,1))  !  count 63
      CALL IXXXXX(P(0,2),ZERO,-1,+1*IC(2),W(1,2))  !  count 87
      CALL IXXXXX(P(0,3),ZERO,+1,-1*IC(3),W(1,3))  !  count 1
      CALL OXXXXX(P(0,4),ZERO,-1,+1*IC(4),W(1,4))  !  count 1
      CALL FFV2_3(W(1,3),W(1,4),GC_100,MDL_MW,FK_MDL_WW,W(1,5))  !  count 103
      CALL IXXXXX(P(0,5),ZERO,+1,-1*IC(5),W(1,6))  !  count 1
      CALL OXXXXX(P(0,6),ZERO,-1,+1*IC(6),W(1,7))  !  count 1
      CALL FFV2_3(W(1,6),W(1,7),GC_100,MDL_MW,FK_MDL_WW,W(1,8))  !  count 103
      CALL OXXXXX(P(0,7),MDL_MB,+1,+1*IC(7),W(1,9))  !  count 2
      CALL OXXXXX(P(0,7),MDL_MB,-1,+1*IC(7),W(1,10))  !  count 2
      CALL IXXXXX(P(0,8),MDL_MB,+1,-1*IC(8),W(1,11))  !  count 2
      CALL IXXXXX(P(0,8),MDL_MB,-1,-1*IC(8),W(1,12))  !  count 2
      CALL FFS4_3(W(1,11),W(1,9),GC_83,MDL_MH,FK_MDL_WH,W(1,13))  !  count 31
      CALL FFS4_3(W(1,11),W(1,10),GC_83,MDL_MH,FK_MDL_WH,W(1,14))  !  count 31
      CALL FFS4_3(W(1,12),W(1,9),GC_83,MDL_MH,FK_MDL_WH,W(1,15))  !  count 31
      CALL FFS4_3(W(1,12),W(1,10),GC_83,MDL_MH,FK_MDL_WH,W(1,16))  !  count 31
      CALL OXXXXX(P(0,9),ZERO,-1,+1*IC(9),W(1,17))  !  count 71
      CALL OXXXXX(P(0,10),ZERO,-1,+1*IC(10),W(1,18))  !  count 87
      CALL FFV2_2(W(1,1),W(1,5),GC_100,ZERO,FK_ZERO,W(1,19))  !  count 4
      CALL FFV2_2(W(1,2),W(1,8),GC_100,ZERO,FK_ZERO,W(1,20))  !  count 15
      CALL FFV2_3_3(W(1,19),W(1,17),GC_50,GC_58,MDL_MZ,ZERO,W(1,21))  !  count 28
      CALL FFV2_3_3(W(1,20),W(1,18),GC_50,GC_58,MDL_MZ,ZERO,W(1,22))  !  count 24
      CALL VVS1P1N_3(W(1,21), W(1,22), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,1))  !  count 1
      CALL FFV2_3(W(1,2),W(1,18),GC_100,MDL_MW,ZERO,W(1,23))  !  count 140
      CALL VVV1_3(W(1,23),W(1,8),GC_53,MDL_MZ,ZERO,W(1,24))  !  count 24
      CALL VVS1P1N_3(W(1,21), W(1,24), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,2))  !  count 1
      CALL FFV1P0_3(W(1,19),W(1,17),GC_1,ZERO,FK_ZERO,W(1,25))  !  count 16
      CALL VVS1_2(W(1,23),W(1,13),GC_72,MDL_MW,ZERO,W(1,26))  !  count 14
      CALL VVS1_2(W(1,23),W(1,14),GC_72,MDL_MW,ZERO,W(1,27))  !  count 14
      CALL VVS1_2(W(1,23),W(1,15),GC_72,MDL_MW,ZERO,W(1,28))  !  count 14
      CALL VVS1_2(W(1,23),W(1,16),GC_72,MDL_MW,ZERO,W(1,29))  !  count 14
      CALL VVV1P1N_2(W(1,25), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,3))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,21), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,4))  !  count 1
      CALL VVS1_1(W(1,8),W(1,13),GC_72,MDL_MW,FK_MDL_WW,W(1,30))  !  count 18
      CALL VVS1_1(W(1,8),W(1,14),GC_72,MDL_MW,FK_MDL_WW,W(1,31))  !  count 18
      CALL VVS1_1(W(1,8),W(1,15),GC_72,MDL_MW,FK_MDL_WW,W(1,32))  !  count 18
      CALL VVS1_1(W(1,8),W(1,16),GC_72,MDL_MW,FK_MDL_WW,W(1,33))  !  count 18
      CALL FFV2_2(W(1,19),W(1,23),GC_100,ZERO,FK_ZERO,W(1,34))  !  count 4
      CALL FFV2P1N_3(W(1,34), W(1,17), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,5))  !  count 1
      CALL VVV1P1N_3(W(1,25), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,6))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,21), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,7))  !  count 1
      CALL FFV2_1(W(1,17),W(1,8),GC_100,ZERO,FK_ZERO,W(1,35))  !  count 7
      CALL FFV2_3(W(1,19),W(1,35),GC_100,MDL_MW,ZERO,W(1,36))  !  count 4
      CALL VVS1P1N_3(W(1,23), W(1,36), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,8))  !  count 1
      CALL FFV2_2(W(1,2),W(1,30),GC_100,ZERO,FK_ZERO,W(1,37))  !  count 6
      CALL FFV2_2(W(1,2),W(1,31),GC_100,ZERO,FK_ZERO,W(1,38))  !  count 6
      CALL FFV2_2(W(1,2),W(1,32),GC_100,ZERO,FK_ZERO,W(1,39))  !  count 6
      CALL FFV2_2(W(1,2),W(1,33),GC_100,ZERO,FK_ZERO,W(1,40))  !  count 6
      CALL FFV1P1N_1(W(1,18), W(1,25), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,9))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,21), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,10))  !  count 1
      CALL FFV2_1(W(1,18),W(1,30),GC_100,ZERO,FK_ZERO,W(1,41))  !  count 6
      CALL FFV2_1(W(1,18),W(1,31),GC_100,ZERO,FK_ZERO,W(1,42))  !  count 6
      CALL FFV2_1(W(1,18),W(1,32),GC_100,ZERO,FK_ZERO,W(1,43))  !  count 6
      CALL FFV2_1(W(1,18),W(1,33),GC_100,ZERO,FK_ZERO,W(1,44))  !  count 6
      CALL FFV1P1N_2(W(1,2), W(1,25), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,11))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,21), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,12))  !  count 1
      CALL FFV2_1(W(1,18),W(1,8),GC_100,ZERO,FK_ZERO,W(1,45))  !  count 15
      CALL FFV2_5_3(W(1,2),W(1,45),-GC_50,GC_58,MDL_MZ,ZERO,W(1,46))  !  count 24
      CALL VVS1P1N_3(W(1,21), W(1,46), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,13))  !  count 1
      CALL FFV2_2(W(1,1),W(1,8),GC_100,ZERO,FK_ZERO,W(1,47))  !  count 4
      CALL FFV2_2(W(1,2),W(1,5),GC_100,ZERO,FK_ZERO,W(1,48))  !  count 15
      CALL FFV2_3_3(W(1,47),W(1,17),GC_50,GC_58,MDL_MZ,ZERO,W(1,49))  !  count 28
      CALL FFV2_3_3(W(1,48),W(1,18),GC_50,GC_58,MDL_MZ,ZERO,W(1,50))  !  count 24
      CALL VVS1P1N_3(W(1,49), W(1,50), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,14))  !  count 1
      CALL VVV1_3(W(1,23),W(1,5),GC_53,MDL_MZ,ZERO,W(1,51))  !  count 24
      CALL VVS1P1N_3(W(1,49), W(1,51), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,15))  !  count 1
      CALL FFV1P0_3(W(1,47),W(1,17),GC_1,ZERO,FK_ZERO,W(1,52))  !  count 16
      CALL VVV1P1N_2(W(1,52), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,16))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,49), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,17))  !  count 1
      CALL VVS1_1(W(1,5),W(1,13),GC_72,MDL_MW,FK_MDL_WW,W(1,53))  !  count 18
      CALL VVS1_1(W(1,5),W(1,14),GC_72,MDL_MW,FK_MDL_WW,W(1,54))  !  count 18
      CALL VVS1_1(W(1,5),W(1,15),GC_72,MDL_MW,FK_MDL_WW,W(1,55))  !  count 18
      CALL VVS1_1(W(1,5),W(1,16),GC_72,MDL_MW,FK_MDL_WW,W(1,56))  !  count 18
      CALL FFV2_2(W(1,47),W(1,23),GC_100,ZERO,FK_ZERO,W(1,57))  !  count 4
      CALL FFV2P1N_3(W(1,57), W(1,17), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,18))  !  count 1
      CALL VVV1P1N_3(W(1,52), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,19))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,49), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,20))  !  count 1
      CALL FFV2_1(W(1,17),W(1,5),GC_100,ZERO,FK_ZERO,W(1,58))  !  count 7
      CALL FFV2_3(W(1,47),W(1,58),GC_100,MDL_MW,ZERO,W(1,59))  !  count 4
      CALL VVS1P1N_3(W(1,23), W(1,59), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,21))  !  count 1
      CALL FFV2_2(W(1,2),W(1,53),GC_100,ZERO,FK_ZERO,W(1,60))  !  count 6
      CALL FFV2_2(W(1,2),W(1,54),GC_100,ZERO,FK_ZERO,W(1,61))  !  count 6
      CALL FFV2_2(W(1,2),W(1,55),GC_100,ZERO,FK_ZERO,W(1,62))  !  count 6
      CALL FFV2_2(W(1,2),W(1,56),GC_100,ZERO,FK_ZERO,W(1,63))  !  count 6
      CALL FFV1P1N_1(W(1,18), W(1,52), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,22))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,49), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,23))  !  count 1
      CALL FFV2_1(W(1,18),W(1,53),GC_100,ZERO,FK_ZERO,W(1,64))  !  count 6
      CALL FFV2_1(W(1,18),W(1,54),GC_100,ZERO,FK_ZERO,W(1,65))  !  count 6
      CALL FFV2_1(W(1,18),W(1,55),GC_100,ZERO,FK_ZERO,W(1,66))  !  count 6
      CALL FFV2_1(W(1,18),W(1,56),GC_100,ZERO,FK_ZERO,W(1,67))  !  count 6
      CALL FFV1P1N_2(W(1,2), W(1,52), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,24))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,49), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,25))  !  count 1
      CALL FFV2_1(W(1,18),W(1,5),GC_100,ZERO,FK_ZERO,W(1,68))  !  count 15
      CALL FFV2_5_3(W(1,2),W(1,68),-GC_50,GC_58,MDL_MZ,ZERO,W(1,69))  !  count 24
      CALL VVS1P1N_3(W(1,49), W(1,69), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,26))  !  count 1
      CALL FFV2_3(W(1,1),W(1,17),GC_100,MDL_MW,ZERO,W(1,70))  !  count 55
      CALL VVV1_3(W(1,70),W(1,8),GC_53,MDL_MZ,ZERO,W(1,71))  !  count 28
      CALL VVS1P1N_3(W(1,71), W(1,50), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,27))  !  count 1
      CALL VVS1_2(W(1,70),W(1,13),GC_72,MDL_MW,ZERO,W(1,72))  !  count 17
      CALL VVS1_2(W(1,70),W(1,14),GC_72,MDL_MW,ZERO,W(1,73))  !  count 17
      CALL VVS1_2(W(1,70),W(1,15),GC_72,MDL_MW,ZERO,W(1,74))  !  count 17
      CALL VVS1_2(W(1,70),W(1,16),GC_72,MDL_MW,ZERO,W(1,75))  !  count 17
      CALL FFV1P0_3(W(1,48),W(1,18),GC_1,ZERO,FK_ZERO,W(1,76))  !  count 12
      CALL VVV1P1N_2(W(1,76), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,28))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,50), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,29))  !  count 1
      CALL FFV2_2(W(1,48),W(1,70),GC_100,ZERO,FK_ZERO,W(1,77))  !  count 4
      CALL FFV2P1N_3(W(1,77), W(1,18), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,30))  !  count 1
      CALL VVV1P0_1(W(1,70),W(1,30),-GC_3,ZERO,FK_ZERO,W(1,78))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,31),-GC_3,ZERO,FK_ZERO,W(1,79))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,32),-GC_3,ZERO,FK_ZERO,W(1,80))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,33),-GC_3,ZERO,FK_ZERO,W(1,81))  !  count 3
      CALL FFV1P1N_3(W(1,48), W(1,18), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/78,79,80,81/),
     & TMP, W, AMP(1,31))  !  count 1
      CALL VVV1_3(W(1,70),W(1,30),GC_53,MDL_MZ,ZERO,W(1,82))  !  count 3
      CALL VVV1_3(W(1,70),W(1,31),GC_53,MDL_MZ,ZERO,W(1,83))  !  count 3
      CALL VVV1_3(W(1,70),W(1,32),GC_53,MDL_MZ,ZERO,W(1,84))  !  count 3
      CALL VVV1_3(W(1,70),W(1,33),GC_53,MDL_MZ,ZERO,W(1,85))  !  count 3
      CALL FFV2_3P1N_3(W(1,48), W(1,18), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/82,83,84,85/),
     & TMP, W, AMP(1,32))  !  count 1
      CALL FFV2P1N_3(W(1,48), W(1,45), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,33))  !  count 1
      CALL VVV1_3(W(1,70),W(1,5),GC_53,MDL_MZ,ZERO,W(1,86))  !  count 28
      CALL VVS1P1N_3(W(1,86), W(1,22), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,34))  !  count 1
      CALL FFV1P0_3(W(1,20),W(1,18),GC_1,ZERO,FK_ZERO,W(1,87))  !  count 12
      CALL VVV1P1N_2(W(1,87), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,35))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,22), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,36))  !  count 1
      CALL FFV2_2(W(1,20),W(1,70),GC_100,ZERO,FK_ZERO,W(1,88))  !  count 4
      CALL FFV2P1N_3(W(1,88), W(1,18), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,37))  !  count 1
      CALL VVV1P0_1(W(1,70),W(1,53),-GC_3,ZERO,FK_ZERO,W(1,89))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,54),-GC_3,ZERO,FK_ZERO,W(1,90))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,55),-GC_3,ZERO,FK_ZERO,W(1,91))  !  count 3
      CALL VVV1P0_1(W(1,70),W(1,56),-GC_3,ZERO,FK_ZERO,W(1,92))  !  count 3
      CALL FFV1P1N_3(W(1,20), W(1,18), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/89,90,91,92/),
     & TMP, W, AMP(1,38))  !  count 1
      CALL VVV1_3(W(1,70),W(1,53),GC_53,MDL_MZ,ZERO,W(1,93))  !  count 3
      CALL VVV1_3(W(1,70),W(1,54),GC_53,MDL_MZ,ZERO,W(1,94))  !  count 3
      CALL VVV1_3(W(1,70),W(1,55),GC_53,MDL_MZ,ZERO,W(1,95))  !  count 3
      CALL VVV1_3(W(1,70),W(1,56),GC_53,MDL_MZ,ZERO,W(1,96))  !  count 3
      CALL FFV2_3P1N_3(W(1,20), W(1,18), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/93,94,95,96/),
     & TMP, W, AMP(1,39))  !  count 1
      CALL FFV2P1N_3(W(1,20), W(1,68), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,40))  !  count 1
      CALL VVS1_3(W(1,70),W(1,5),GC_72,MDL_MH,ZERO,W(1,97))  !  count 16
      CALL VVS1_3(W(1,23),W(1,8),GC_72,MDL_MH,ZERO,W(1,98))  !  count 8
      CALL SSS1P1N_3(W(1,97), W(1,98), GC_69, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,41))  !  count 1
      CALL VVS1P1N_3(W(1,86), W(1,24), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,42))  !  count 1
      CALL VVV1P0_1(W(1,70),W(1,5),-GC_3,ZERO,FK_ZERO,W(1,99))  !  count 16
      CALL VVV1P1N_2(W(1,99), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,43))  !  count 1
      CALL VVS1P1N_1(W(1,8), W(1,97), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,44))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,86), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,45))  !  count 1
      CALL VVSS1P1N_3(W(1,23), W(1,8), W(1,97), GC_34, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,46))  !  count 1
      CALL VVS1_3(W(1,70),W(1,8),GC_72,MDL_MH,ZERO,W(1,100))  !  count 16
      CALL VVS1_3(W(1,23),W(1,5),GC_72,MDL_MH,ZERO,W(1,101))  !  count 8
      CALL SSS1P1N_3(W(1,100), W(1,101), GC_69, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,47))  !  count 1
      CALL VVS1P1N_3(W(1,71), W(1,51), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,48))  !  count 1
      CALL VVV1P0_1(W(1,70),W(1,8),-GC_3,ZERO,FK_ZERO,W(1,102))  !  count 16
      CALL VVV1P1N_2(W(1,102), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,49))  !  count 1
      CALL VVS1P1N_1(W(1,5), W(1,100), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,50))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,71), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,51))  !  count 1
      CALL VVSS1P1N_3(W(1,23), W(1,5), W(1,100), GC_34, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,52))  !  count 1
      CALL VVV1P0_1(W(1,23),W(1,5),-GC_3,ZERO,FK_ZERO,W(1,103))  !  count 12
      CALL VVV1P1N_2(W(1,103), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,53))  !  count 1
      CALL VVS1P1N_1(W(1,8), W(1,101), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,54))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,51), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,55))  !  count 1
      CALL VVV1P0_1(W(1,23),W(1,8),-GC_3,ZERO,FK_ZERO,W(1,104))  !  count 12
      CALL VVV1P1N_2(W(1,104), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,56))  !  count 1
      CALL VVS1P1N_1(W(1,5), W(1,98), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,57))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,24), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,58))  !  count 1
      CALL VVVV2P1N_2(W(1,23), W(1,5), W(1,8), GC_35, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,59))  !  count 1
      CALL VVVV2_1(W(1,70),W(1,5),W(1,8),GC_35,MDL_MW,ZERO,W(1,105))  !  count 4
      CALL VVS1P1N_3(W(1,23), W(1,105), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,60))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,5),W(1,13),GC_34,MDL_MH,ZERO,W(1,106))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,5),W(1,14),GC_34,MDL_MH,ZERO,W(1,107))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,5),W(1,15),GC_34,MDL_MH,ZERO,W(1,108))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,5),W(1,16),GC_34,MDL_MH,ZERO,W(1,109))  !  count 1
      CALL VVS1P1N_3(W(1,23), W(1,8), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/106,107,108,109/), 
     & TMP, W, AMP(1,61))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,8),W(1,13),GC_34,MDL_MH,ZERO,W(1,110))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,8),W(1,14),GC_34,MDL_MH,ZERO,W(1,111))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,8),W(1,15),GC_34,MDL_MH,ZERO,W(1,112))  !  count 1
      CALL VVSS1_3(W(1,70),W(1,8),W(1,16),GC_34,MDL_MH,ZERO,W(1,113))  !  count 1
      CALL VVS1P1N_3(W(1,23), W(1,5), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/110,111,112,113/), 
     & TMP, W, AMP(1,62))  !  count 1
      CALL VVVV2P1N_3(W(1,70), W(1,23), W(1,8), GC_35, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,63))  !  count 1
      CALL VVV1P1N_1(W(1,23), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/89,90,91,92/),
     & TMP, W, AMP(1,64))  !  count 1
      CALL VVS1_3(W(1,70),W(1,53),GC_72,MDL_MH,ZERO,W(1,114))  !  count 1
      CALL VVS1_3(W(1,70),W(1,54),GC_72,MDL_MH,ZERO,W(1,115))  !  count 1
      CALL VVS1_3(W(1,70),W(1,55),GC_72,MDL_MH,ZERO,W(1,116))  !  count 1
      CALL VVS1_3(W(1,70),W(1,56),GC_72,MDL_MH,ZERO,W(1,117))  !  count 1
      CALL VVS1P1N_3(W(1,23), W(1,8), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/114,115,116,117/), 
     & TMP, W, AMP(1,65))  !  count 1
      CALL VVV1P1N_3(W(1,23), W(1,8), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/93,94,95,96/),
     & TMP, W, AMP(1,66))  !  count 1
      CALL VVV1P1N_3(W(1,102), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,67))  !  count 1
      CALL VVS1P1N_2(W(1,23), W(1,100), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,68))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,71), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,69))  !  count 1
      CALL VVVV2P1N_4(W(1,70), W(1,23), W(1,5), GC_35, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,70))  !  count 1
      CALL VVV1P1N_3(W(1,99), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,71))  !  count 1
      CALL VVS1P1N_2(W(1,23), W(1,97), GC_72, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,72))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,86), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,73))  !  count 1
      CALL VVV1P1N_1(W(1,23), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/78,79,80,81/),
     & TMP, W, AMP(1,74))  !  count 1
      CALL VVS1_3(W(1,70),W(1,30),GC_72,MDL_MH,ZERO,W(1,118))  !  count 1
      CALL VVS1_3(W(1,70),W(1,31),GC_72,MDL_MH,ZERO,W(1,119))  !  count 1
      CALL VVS1_3(W(1,70),W(1,32),GC_72,MDL_MH,ZERO,W(1,120))  !  count 1
      CALL VVS1_3(W(1,70),W(1,33),GC_72,MDL_MH,ZERO,W(1,121))  !  count 1
      CALL VVS1P1N_3(W(1,23), W(1,5), GC_72, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/118,119,120,121/), 
     & TMP, W, AMP(1,75))  !  count 1
      CALL VVV1P1N_3(W(1,23), W(1,5), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/82,83,84,85/),
     & TMP, W, AMP(1,76))  !  count 1
      CALL FFV1P1N_1(W(1,18), W(1,102), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,77))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,71), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,78))  !  count 1
      CALL FFV1P1N_2(W(1,2), W(1,102), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,79))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,71), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,80))  !  count 1
      CALL FFV1P1N_3(W(1,2), W(1,45), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/89,90,91,92/),
     & TMP, W, AMP(1,81))  !  count 1
      CALL FFV2_5P1N_3(W(1,2), W(1,45), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/93,94,95,96/),
     & TMP, W, AMP(1,82))  !  count 1
      CALL FFV2_1(W(1,45),W(1,70),GC_100,ZERO,FK_ZERO,W(1,122))  !  count 4
      CALL FFV2P1N_3(W(1,2), W(1,122), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,83))  !  count 1
      CALL VVS1P1N_3(W(1,71), W(1,69), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,84))  !  count 1
      CALL FFV1P0_3(W(1,2),W(1,68),GC_2,ZERO,FK_ZERO,W(1,123))  !  count 12
      CALL VVV1P1N_2(W(1,123), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,85))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,69), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,86))  !  count 1
      CALL FFV2_1(W(1,68),W(1,70),GC_100,ZERO,FK_ZERO,W(1,124))  !  count 4
      CALL FFV2P1N_3(W(1,2), W(1,124), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,87))  !  count 1
      CALL FFV1P1N_3(W(1,2), W(1,68), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/78,79,80,81/),
     & TMP, W, AMP(1,88))  !  count 1
      CALL FFV2_5P1N_3(W(1,2), W(1,68), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/82,83,84,85/),
     & TMP, W, AMP(1,89))  !  count 1
      CALL FFV1P1N_1(W(1,18), W(1,99), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,90))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,86), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,91))  !  count 1
      CALL FFV1P1N_2(W(1,2), W(1,99), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,92))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,86), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,93))  !  count 1
      CALL VVS1P1N_3(W(1,86), W(1,46), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,94))  !  count 1
      CALL FFV1P0_3(W(1,2),W(1,45),GC_2,ZERO,FK_ZERO,W(1,125))  !  count 12
      CALL VVV1P1N_2(W(1,125), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,95))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,46), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/72,73,74,75/),
     & TMP, W, AMP(1,96))  !  count 1
      CALL FFV2_2(W(1,1),W(1,30),GC_100,ZERO,FK_ZERO,W(1,126))  !  count 7
      CALL FFV2_2(W(1,1),W(1,31),GC_100,ZERO,FK_ZERO,W(1,127))  !  count 7
      CALL FFV2_2(W(1,1),W(1,32),GC_100,ZERO,FK_ZERO,W(1,128))  !  count 7
      CALL FFV2_2(W(1,1),W(1,33),GC_100,ZERO,FK_ZERO,W(1,129))  !  count 7
      CALL FFV1P1N_1(W(1,17), W(1,76), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,97))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,50), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,98))  !  count 1
      CALL FFV2_1(W(1,17),W(1,30),GC_100,ZERO,FK_ZERO,W(1,130))  !  count 6
      CALL FFV2_1(W(1,17),W(1,31),GC_100,ZERO,FK_ZERO,W(1,131))  !  count 6
      CALL FFV2_1(W(1,17),W(1,32),GC_100,ZERO,FK_ZERO,W(1,132))  !  count 6
      CALL FFV2_1(W(1,17),W(1,33),GC_100,ZERO,FK_ZERO,W(1,133))  !  count 6
      CALL FFV1P1N_2(W(1,1), W(1,76), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,99))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,50), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,100))  !  count 1
      CALL FFV2_5_3(W(1,1),W(1,35),-GC_50,GC_58,MDL_MZ,ZERO,W(1,134))  !  count 28
      CALL VVS1P1N_3(W(1,134), W(1,50), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,101))  !  count 1
      CALL FFV2_2(W(1,1),W(1,53),GC_100,ZERO,FK_ZERO,W(1,135))  !  count 7
      CALL FFV2_2(W(1,1),W(1,54),GC_100,ZERO,FK_ZERO,W(1,136))  !  count 7
      CALL FFV2_2(W(1,1),W(1,55),GC_100,ZERO,FK_ZERO,W(1,137))  !  count 7
      CALL FFV2_2(W(1,1),W(1,56),GC_100,ZERO,FK_ZERO,W(1,138))  !  count 7
      CALL FFV1P1N_1(W(1,17), W(1,87), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,102))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,22), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,103))  !  count 1
      CALL FFV2_1(W(1,17),W(1,53),GC_100,ZERO,FK_ZERO,W(1,139))  !  count 6
      CALL FFV2_1(W(1,17),W(1,54),GC_100,ZERO,FK_ZERO,W(1,140))  !  count 6
      CALL FFV2_1(W(1,17),W(1,55),GC_100,ZERO,FK_ZERO,W(1,141))  !  count 6
      CALL FFV2_1(W(1,17),W(1,56),GC_100,ZERO,FK_ZERO,W(1,142))  !  count 6
      CALL FFV1P1N_2(W(1,1), W(1,87), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,104))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,22), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,105))  !  count 1
      CALL FFV2_5_3(W(1,1),W(1,58),-GC_50,GC_58,MDL_MZ,ZERO,W(1,143))  !  count 28
      CALL VVS1P1N_3(W(1,143), W(1,22), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,106))  !  count 1
      CALL FFV1P1N_1(W(1,17), W(1,104), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,107))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,24), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,108))  !  count 1
      CALL FFV1P1N_2(W(1,1), W(1,104), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,109))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,24), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,110))  !  count 1
      CALL FFV2P1N_1(W(1,35), W(1,23), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,111))  !  count 1
      CALL FFV1P0_3(W(1,1),W(1,35),GC_2,ZERO,FK_ZERO,W(1,144))  !  count 16
      CALL VVV1P1N_3(W(1,144), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,112))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,134), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/53,54,55,56/),
     & TMP, W, AMP(1,113))  !  count 1
      CALL VVS1P1N_3(W(1,143), W(1,24), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,114))  !  count 1
      CALL FFV1P0_3(W(1,1),W(1,58),GC_2,ZERO,FK_ZERO,W(1,145))  !  count 16
      CALL VVV1P1N_2(W(1,145), W(1,8), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,115))  !  count 1
      CALL VVV1P1N_1(W(1,8), W(1,143), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,116))  !  count 1
      CALL VVV1P1N_3(W(1,145), W(1,23), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,117))  !  count 1
      CALL VVV1P1N_2(W(1,23), W(1,143), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/30,31,32,33/),
     & TMP, W, AMP(1,118))  !  count 1
      CALL FFV2P1N_1(W(1,58), W(1,23), GC_100, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,119))  !  count 1
      CALL FFV1P1N_1(W(1,17), W(1,103), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,120))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,51), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,121))  !  count 1
      CALL FFV1P1N_2(W(1,1), W(1,103), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,122))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,51), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,123))  !  count 1
      CALL VVS1P1N_3(W(1,134), W(1,51), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,124))  !  count 1
      CALL VVV1P1N_2(W(1,144), W(1,5), -GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,125))  !  count 1
      CALL VVV1P1N_1(W(1,5), W(1,134), GC_53, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/26,27,28,29/),
     & TMP, W, AMP(1,126))  !  count 1
      CALL FFV1P1N_1(W(1,18), W(1,144), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,127))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,134), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,128))  !  count 1
      CALL FFV1P1N_2(W(1,2), W(1,144), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,129))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,134), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/64,65,66,67/),
     & TMP, W, AMP(1,130))  !  count 1
      CALL FFV1P1N_1(W(1,17), W(1,125), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,131))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,46), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/135,136,137,138/),
     & TMP, W, AMP(1,132))  !  count 1
      CALL FFV1P1N_2(W(1,1), W(1,125), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,133))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,46), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/139,140,141,142/),
     & TMP, W, AMP(1,134))  !  count 1
      CALL FFV1P1N_1(W(1,18), W(1,145), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,135))  !  count 1
      CALL FFV2_3P1N_1(W(1,18), W(1,143), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/37,38,39,40/),
     & TMP, W, AMP(1,136))  !  count 1
      CALL FFV1P1N_2(W(1,2), W(1,145), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,137))  !  count 1
      CALL FFV2_5P1N_2(W(1,2), W(1,143), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/41,42,43,44/),
     & TMP, W, AMP(1,138))  !  count 1
      CALL VVS1P1N_3(W(1,143), W(1,46), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,139))  !  count 1
      CALL FFV1P1N_1(W(1,17), W(1,123), GC_1, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,140))  !  count 1
      CALL FFV2_3P1N_1(W(1,17), W(1,69), GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/126,127,128,129/),
     & TMP, W, AMP(1,141))  !  count 1
      CALL FFV1P1N_2(W(1,1), W(1,123), GC_2, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,142))  !  count 1
      CALL FFV2_5P1N_2(W(1,1), W(1,69), -GC_50, GC_58, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/130,131,132,133/),
     & TMP, W, AMP(1,143))  !  count 1
      CALL VVS1P1N_3(W(1,134), W(1,69), GC_81, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/13,14,15,16/), 
     & TMP, W, AMP(1,144))  !  count 1

      JAMP(:,:)  = (0d0,0d0)
      DO K = 1, NCOMB
        
        JAMP(:,:) = (0D0,0D0)
C       JAMPs contributing to orders ALL_ORDERS=1
        JAMP(1,1) = AMP( K,1)+AMP( K,2)+AMP( K,3)+AMP( K,4)+AMP( K,5)+AM
     $  P( K,6)+AMP( K,7) +AMP( K,8)+AMP( K,9)+AMP( K,10)+AMP( K,11)+AMP( K,12)+
     $  AMP( K,13)+AMP( K,14)+AMP( K,15) +AMP( K,16)+AMP( K,17)+AMP( K,18)+AMP( 
     $  K,19)+AMP( K,20)+AMP( K,21)+AMP( K,22)+AMP( K,23) +AMP( K,24)+AMP( K,25)
     $  +AMP( K,26)+AMP( K,27)+AMP( K,28)+AMP( K,29)+AMP( K,30)+AMP( K,31) +AMP(
     $   K,32)+AMP( K,33)+AMP( K,34)+AMP( K,35)+AMP( K,36)+AMP( K,37)+AMP( K,38)
     $  +AMP( K,39) +AMP( K,40)+AMP( K,41)+AMP( K,42)+AMP( K,43)+AMP( K,44)+AMP(
     $   K,45)+AMP( K,46)+AMP( K,47) +AMP( K,48)+AMP( K,49)+AMP( K,50)+AMP( K,51
     $  )+AMP( K,52)+AMP( K,53)+AMP( K,54)+AMP( K,55) +AMP( K,56)+AMP( K,57)+AMP
     $  ( K,58)+AMP( K,59)+AMP( K,60)+AMP( K,61)+AMP( K,62)+AMP( K,63) +AMP( K,6
     $  4)+AMP( K,65)+AMP( K,66)+AMP( K,67)+AMP( K,68)+AMP( K,69)+AMP( K,70)+AMP
     $  ( K,71) +AMP( K,72)+AMP( K,73)+AMP( K,74)+AMP( K,75)+AMP( K,76)+AMP( K,7
     $  7)+AMP( K,78)+AMP( K,79) +AMP( K,80)+AMP( K,81)+AMP( K,82)+AMP( K,83)+AM
     $  P( K,84)+AMP( K,85)+AMP( K,86)+AMP( K,87) +AMP( K,88)+AMP( K,89)+AMP( K,
     $  90)+AMP( K,91)+AMP( K,92)+AMP( K,93)+AMP( K,94)+AMP( K,95) +AMP( K,96)+A
     $  MP( K,97)+AMP( K,98)+AMP( K,99)+AMP( K,100)+AMP( K,101)+AMP( K,102) +AMP
     $  ( K,103)+AMP( K,104)+AMP( K,105)+AMP( K,106)+AMP( K,107)+AMP( K,108)+AMP
     $  ( K,109) +AMP( K,110)+AMP( K,111)+AMP( K,112)+AMP( K,113)+AMP( K,114)+AM
     $  P( K,115)+AMP( K,116) +AMP( K,117)+AMP( K,118)+AMP( K,119)+AMP( K,120)+A
     $  MP( K,121)+AMP( K,122)+AMP( K,123) +AMP( K,124)+AMP( K,125)+AMP( K,126)+
     $  AMP( K,127)+AMP( K,128)+AMP( K,129)+AMP( K,130) +AMP( K,131)+AMP( K,132)
     $  +AMP( K,133)+AMP( K,134)+AMP( K,135)+AMP( K,136)+AMP( K,137) +AMP( K,138
     $  )+AMP( K,139)+AMP( K,140)+AMP( K,141)+AMP( K,142)+AMP( K,143)+AMP( K,144
     $  )

        TS(K) = 0.D0 
        DO M = 1, NAMPSO
          DO I = 1, NCOLOR
            ZTEMP = (0.D0,0.D0)
            DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
            ENDDO
            DO N = 1, NAMPSO

              TS(K) = TS(K) + ZTEMP*DCONJG(JAMP(I,N))

            ENDDO
          ENDDO
        ENDDO
        if(sde_strat.eq.1) then
        
        IF(SDE_STRAT.EQ.1)THEN
          AMP2(1)=AMP2(1)+AMP( K,1)*DCONJG(AMP( K,1))
          AMP2(2)=AMP2(2)+AMP( K,2)*DCONJG(AMP( K,2))
          AMP2(3)=AMP2(3)+(AMP( K,3)+AMP( K,4))*DCONJG(AMP( K,3)+AMP( K,
     $    4))
          AMP2(5)=AMP2(5)+AMP( K,5)*DCONJG(AMP( K,5))
          AMP2(6)=AMP2(6)+(AMP( K,6)+AMP( K,7))*DCONJG(AMP( K,6)+AMP( K,
     $    7))
          AMP2(8)=AMP2(8)+AMP( K,8)*DCONJG(AMP( K,8))
          AMP2(9)=AMP2(9)+(AMP( K,9)+AMP( K,10))*DCONJG(AMP( K,9)+AMP( K
     $    ,10))
          AMP2(11)=AMP2(11)+(AMP( K,11)+AMP( K,12))*DCONJG(AMP( K,11)+AM
     $    P( K,12))
          AMP2(13)=AMP2(13)+AMP( K,13)*DCONJG(AMP( K,13))
          AMP2(14)=AMP2(14)+AMP( K,14)*DCONJG(AMP( K,14))
          AMP2(15)=AMP2(15)+AMP( K,15)*DCONJG(AMP( K,15))
          AMP2(16)=AMP2(16)+(AMP( K,16)+AMP( K,17))*DCONJG(AMP( K,16)+AM
     $    P( K,17))
          AMP2(18)=AMP2(18)+AMP( K,18)*DCONJG(AMP( K,18))
          AMP2(19)=AMP2(19)+(AMP( K,19)+AMP( K,20))*DCONJG(AMP( K,19)+AM
     $    P( K,20))
          AMP2(21)=AMP2(21)+AMP( K,21)*DCONJG(AMP( K,21))
          AMP2(22)=AMP2(22)+(AMP( K,22)+AMP( K,23))*DCONJG(AMP( K,22)+AM
     $    P( K,23))
          AMP2(24)=AMP2(24)+(AMP( K,24)+AMP( K,25))*DCONJG(AMP( K,24)+AM
     $    P( K,25))
          AMP2(26)=AMP2(26)+AMP( K,26)*DCONJG(AMP( K,26))
          AMP2(27)=AMP2(27)+AMP( K,27)*DCONJG(AMP( K,27))
          AMP2(28)=AMP2(28)+(AMP( K,28)+AMP( K,29))*DCONJG(AMP( K,28)+AM
     $    P( K,29))
          AMP2(30)=AMP2(30)+AMP( K,30)*DCONJG(AMP( K,30))
          AMP2(31)=AMP2(31)+(AMP( K,31)+AMP( K,32))*DCONJG(AMP( K,31)+AM
     $    P( K,32))
          AMP2(33)=AMP2(33)+AMP( K,33)*DCONJG(AMP( K,33))
          AMP2(34)=AMP2(34)+AMP( K,34)*DCONJG(AMP( K,34))
          AMP2(35)=AMP2(35)+(AMP( K,35)+AMP( K,36))*DCONJG(AMP( K,35)+AM
     $    P( K,36))
          AMP2(37)=AMP2(37)+AMP( K,37)*DCONJG(AMP( K,37))
          AMP2(38)=AMP2(38)+(AMP( K,38)+AMP( K,39))*DCONJG(AMP( K,38)+AM
     $    P( K,39))
          AMP2(40)=AMP2(40)+AMP( K,40)*DCONJG(AMP( K,40))
          AMP2(41)=AMP2(41)+(AMP( K,41)+AMP( K,42))*DCONJG(AMP( K,41)+AM
     $    P( K,42))
          AMP2(43)=AMP2(43)+(AMP( K,43)+AMP( K,44)+AMP( K,45))*DCONJG(AM
     $    P( K,43)   +AMP( K,44)+AMP( K,45))
          AMP2(47)=AMP2(47)+(AMP( K,47)+AMP( K,48))*DCONJG(AMP( K,47)+AM
     $    P( K,48))
          AMP2(49)=AMP2(49)+(AMP( K,49)+AMP( K,50)+AMP( K,51))*DCONJG(AM
     $    P( K,49)   +AMP( K,50)+AMP( K,51))
          AMP2(53)=AMP2(53)+(AMP( K,53)+AMP( K,54)+AMP( K,55))*DCONJG(AM
     $    P( K,53)   +AMP( K,54)+AMP( K,55))
          AMP2(56)=AMP2(56)+(AMP( K,56)+AMP( K,57)+AMP( K,58))*DCONJG(AM
     $    P( K,56)   +AMP( K,57)+AMP( K,58))
          AMP2(64)=AMP2(64)+(AMP( K,64)+AMP( K,65)+AMP( K,66))*DCONJG(AM
     $    P( K,64)   +AMP( K,65)+AMP( K,66))
          AMP2(67)=AMP2(67)+(AMP( K,67)+AMP( K,68)+AMP( K,69))*DCONJG(AM
     $    P( K,67)   +AMP( K,68)+AMP( K,69))
          AMP2(71)=AMP2(71)+(AMP( K,71)+AMP( K,72)+AMP( K,73))*DCONJG(AM
     $    P( K,71)   +AMP( K,72)+AMP( K,73))
          AMP2(74)=AMP2(74)+(AMP( K,74)+AMP( K,75)+AMP( K,76))*DCONJG(AM
     $    P( K,74)   +AMP( K,75)+AMP( K,76))
          AMP2(77)=AMP2(77)+(AMP( K,77)+AMP( K,78))*DCONJG(AMP( K,77)+AM
     $    P( K,78))
          AMP2(79)=AMP2(79)+(AMP( K,79)+AMP( K,80))*DCONJG(AMP( K,79)+AM
     $    P( K,80))
          AMP2(81)=AMP2(81)+(AMP( K,81)+AMP( K,82))*DCONJG(AMP( K,81)+AM
     $    P( K,82))
          AMP2(83)=AMP2(83)+AMP( K,83)*DCONJG(AMP( K,83))
          AMP2(84)=AMP2(84)+AMP( K,84)*DCONJG(AMP( K,84))
          AMP2(85)=AMP2(85)+(AMP( K,85)+AMP( K,86))*DCONJG(AMP( K,85)+AM
     $    P( K,86))
          AMP2(87)=AMP2(87)+AMP( K,87)*DCONJG(AMP( K,87))
          AMP2(88)=AMP2(88)+(AMP( K,88)+AMP( K,89))*DCONJG(AMP( K,88)+AM
     $    P( K,89))
          AMP2(90)=AMP2(90)+(AMP( K,90)+AMP( K,91))*DCONJG(AMP( K,90)+AM
     $    P( K,91))
          AMP2(92)=AMP2(92)+(AMP( K,92)+AMP( K,93))*DCONJG(AMP( K,92)+AM
     $    P( K,93))
          AMP2(94)=AMP2(94)+AMP( K,94)*DCONJG(AMP( K,94))
          AMP2(95)=AMP2(95)+(AMP( K,95)+AMP( K,96))*DCONJG(AMP( K,95)+AM
     $    P( K,96))
          AMP2(97)=AMP2(97)+(AMP( K,97)+AMP( K,98))*DCONJG(AMP( K,97)+AM
     $    P( K,98))
          AMP2(99)=AMP2(99)+(AMP( K,99)+AMP( K,100))*DCONJG(AMP( K,99)+A
     $    MP( K,100))
          AMP2(101)=AMP2(101)+AMP( K,101)*DCONJG(AMP( K,101))
          AMP2(102)=AMP2(102)+(AMP( K,102)+AMP( K,103))*DCONJG(AMP( K,10
     $    2)   +AMP( K,103))
          AMP2(104)=AMP2(104)+(AMP( K,104)+AMP( K,105))*DCONJG(AMP( K,10
     $    4)   +AMP( K,105))
          AMP2(106)=AMP2(106)+AMP( K,106)*DCONJG(AMP( K,106))
          AMP2(107)=AMP2(107)+(AMP( K,107)+AMP( K,108))*DCONJG(AMP( K,10
     $    7)   +AMP( K,108))
          AMP2(109)=AMP2(109)+(AMP( K,109)+AMP( K,110))*DCONJG(AMP( K,10
     $    9)   +AMP( K,110))
          AMP2(111)=AMP2(111)+AMP( K,111)*DCONJG(AMP( K,111))
          AMP2(112)=AMP2(112)+(AMP( K,112)+AMP( K,113))*DCONJG(AMP( K,11
     $    2)   +AMP( K,113))
          AMP2(114)=AMP2(114)+AMP( K,114)*DCONJG(AMP( K,114))
          AMP2(115)=AMP2(115)+(AMP( K,115)+AMP( K,116))*DCONJG(AMP( K,11
     $    5)   +AMP( K,116))
          AMP2(117)=AMP2(117)+(AMP( K,117)+AMP( K,118))*DCONJG(AMP( K,11
     $    7)   +AMP( K,118))
          AMP2(119)=AMP2(119)+AMP( K,119)*DCONJG(AMP( K,119))
          AMP2(120)=AMP2(120)+(AMP( K,120)+AMP( K,121))*DCONJG(AMP( K,12
     $    0)   +AMP( K,121))
          AMP2(122)=AMP2(122)+(AMP( K,122)+AMP( K,123))*DCONJG(AMP( K,12
     $    2)   +AMP( K,123))
          AMP2(124)=AMP2(124)+AMP( K,124)*DCONJG(AMP( K,124))
          AMP2(125)=AMP2(125)+(AMP( K,125)+AMP( K,126))*DCONJG(AMP( K,12
     $    5)   +AMP( K,126))
          AMP2(127)=AMP2(127)+(AMP( K,127)+AMP( K,128))*DCONJG(AMP( K,12
     $    7)   +AMP( K,128))
          AMP2(129)=AMP2(129)+(AMP( K,129)+AMP( K,130))*DCONJG(AMP( K,12
     $    9)   +AMP( K,130))
          AMP2(131)=AMP2(131)+(AMP( K,131)+AMP( K,132))*DCONJG(AMP( K,13
     $    1)   +AMP( K,132))
          AMP2(133)=AMP2(133)+(AMP( K,133)+AMP( K,134))*DCONJG(AMP( K,13
     $    3)   +AMP( K,134))
          AMP2(135)=AMP2(135)+(AMP( K,135)+AMP( K,136))*DCONJG(AMP( K,13
     $    5)   +AMP( K,136))
          AMP2(137)=AMP2(137)+(AMP( K,137)+AMP( K,138))*DCONJG(AMP( K,13
     $    7)   +AMP( K,138))
          AMP2(139)=AMP2(139)+AMP( K,139)*DCONJG(AMP( K,139))
          AMP2(140)=AMP2(140)+(AMP( K,140)+AMP( K,141))*DCONJG(AMP( K,14
     $    0)   +AMP( K,141))
          AMP2(142)=AMP2(142)+(AMP( K,142)+AMP( K,143))*DCONJG(AMP( K,14
     $    2)   +AMP( K,143))
          AMP2(144)=AMP2(144)+AMP( K,144)*DCONJG(AMP( K,144))
        ENDIF

        endif
        Do I = 1, NCOLOR
          DO M = 1, NAMPSO
            DO N = 1, NAMPSO

              Jamp2(i)=Jamp2(i)+DABS(DBLE(Jamp(i,m)*dconjg(Jamp(i,n))))

            enddo
          enddo
        Enddo
      ENDDO

      END


      SUBROUTINE PRINT_ZERO_AMP_4()

      integer i
      i =1
      return
      end
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX4(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,i),i=  1,  1) /    1/
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS4
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX4=SOINDEX_FOR_SQUARED_ORDERS4(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS4(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,i),i=  1,  1) /    2/
      COMMON/SQPLITORDERS4/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS4 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function' 
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS4'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN4(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX4(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS4/SQPLITORDERS	  
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX4'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX4(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX4'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS4(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS4/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS4 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS4'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

