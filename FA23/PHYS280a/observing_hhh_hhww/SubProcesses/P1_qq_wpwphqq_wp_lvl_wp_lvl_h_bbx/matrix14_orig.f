      SUBROUTINE SMATRIX14(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.1, 2023-07-11
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared -- no average over initial
C      state/symmetry factor
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: d~ s~ > w+ w+ h u~ c~ QCD=0 QED<=5 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=1024)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=144)
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=144)
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     global (due to reading writting) 
C     
      LOGICAL GOODHEL(NCOMB,2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL

C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      INTEGER ISHEL(2)
      REAL*8 T,MATRIX14
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 HWGT, XTOT, XTRY, XREJ, XR, YFRAC(0:NCOMB)
      INTEGER NGOOD(2), IGOOD(NCOMB,2)
      INTEGER JHEL(2), J, JJ
      INTEGER THIS_NTRY(2)
      SAVE THIS_NTRY
      INTEGER NB_FAIL
      SAVE NB_FAIL
      DATA THIS_NTRY /0,0/
      DATA NB_FAIL /0/
      DOUBLE PRECISION GET_CHANNEL_CUT
      EXTERNAL GET_CHANNEL_CUT

C     
C     This is just to temporarily store the reference grid for
C      helicity of the DiscreteSampler so as to obtain its number of
C      entries with ref_helicity_grid%n_tot_entries
      TYPE(SAMPLEDDIMENSION) REF_HELICITY_GRID
C     
C     GLOBAL VARIABLES
C     
      LOGICAL INIT_MODE
      COMMON /TO_DETERMINE_ZERO_HEL/INIT_MODE
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2

      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_IN(2)
      COMMON /NB_HEL_STATE/ NB_SPIN_STATE_IN

      INTEGER IMIRROR,IPROC
      COMMON/TO_MIRROR/ IMIRROR,IPROC

      DOUBLE PRECISION TMIN_FOR_CHANNEL
      INTEGER SDE_STRAT  ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      COMMON/TO_CHANNEL_STRAT/TMIN_FOR_CHANNEL,	SDE_STRAT

      REAL*8 POL(2)
      COMMON/TO_POLARIZATION/ POL

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      DATA XTRY, XREJ /0,0/
      DATA NGOOD /0,0/
      DATA ISHEL/0,0/
      SAVE YFRAC, IGOOD, JHEL
      DATA (NHEL(I,   1),I=1,10) /-1,-1, 1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,   2),I=1,10) /-1,-1, 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,   3),I=1,10) /-1,-1, 1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,   4),I=1,10) /-1,-1, 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,   5),I=1,10) /-1,-1, 1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,   6),I=1,10) /-1,-1, 1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,   7),I=1,10) /-1,-1, 1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,   8),I=1,10) /-1,-1, 1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,   9),I=1,10) /-1,-1, 1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  10),I=1,10) /-1,-1, 1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  11),I=1,10) /-1,-1, 1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  12),I=1,10) /-1,-1, 1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  13),I=1,10) /-1,-1, 1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  14),I=1,10) /-1,-1, 1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  15),I=1,10) /-1,-1, 1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  16),I=1,10) /-1,-1, 1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  17),I=1,10) /-1,-1, 1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  18),I=1,10) /-1,-1, 1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  19),I=1,10) /-1,-1, 1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  20),I=1,10) /-1,-1, 1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  21),I=1,10) /-1,-1, 1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  22),I=1,10) /-1,-1, 1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  23),I=1,10) /-1,-1, 1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  24),I=1,10) /-1,-1, 1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  25),I=1,10) /-1,-1, 1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  26),I=1,10) /-1,-1, 1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  27),I=1,10) /-1,-1, 1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  28),I=1,10) /-1,-1, 1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  29),I=1,10) /-1,-1, 1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  30),I=1,10) /-1,-1, 1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  31),I=1,10) /-1,-1, 1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  32),I=1,10) /-1,-1, 1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  33),I=1,10) /-1,-1, 1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  34),I=1,10) /-1,-1, 1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  35),I=1,10) /-1,-1, 1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  36),I=1,10) /-1,-1, 1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  37),I=1,10) /-1,-1, 1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  38),I=1,10) /-1,-1, 1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  39),I=1,10) /-1,-1, 1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  40),I=1,10) /-1,-1, 1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  41),I=1,10) /-1,-1, 1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  42),I=1,10) /-1,-1, 1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  43),I=1,10) /-1,-1, 1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  44),I=1,10) /-1,-1, 1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  45),I=1,10) /-1,-1, 1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  46),I=1,10) /-1,-1, 1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  47),I=1,10) /-1,-1, 1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  48),I=1,10) /-1,-1, 1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  49),I=1,10) /-1,-1, 1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  50),I=1,10) /-1,-1, 1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  51),I=1,10) /-1,-1, 1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  52),I=1,10) /-1,-1, 1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  53),I=1,10) /-1,-1, 1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  54),I=1,10) /-1,-1, 1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  55),I=1,10) /-1,-1, 1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  56),I=1,10) /-1,-1, 1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  57),I=1,10) /-1,-1, 1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  58),I=1,10) /-1,-1, 1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  59),I=1,10) /-1,-1, 1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  60),I=1,10) /-1,-1, 1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  61),I=1,10) /-1,-1, 1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  62),I=1,10) /-1,-1, 1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  63),I=1,10) /-1,-1, 1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  64),I=1,10) /-1,-1, 1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  65),I=1,10) /-1,-1, 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  66),I=1,10) /-1,-1, 1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  67),I=1,10) /-1,-1, 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,  68),I=1,10) /-1,-1, 1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,  69),I=1,10) /-1,-1, 1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I,  70),I=1,10) /-1,-1, 1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,  71),I=1,10) /-1,-1, 1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,  72),I=1,10) /-1,-1, 1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,  73),I=1,10) /-1,-1, 1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,  74),I=1,10) /-1,-1, 1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,  75),I=1,10) /-1,-1, 1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,  76),I=1,10) /-1,-1, 1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,  77),I=1,10) /-1,-1, 1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,  78),I=1,10) /-1,-1, 1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,  79),I=1,10) /-1,-1, 1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,  80),I=1,10) /-1,-1, 1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,  81),I=1,10) /-1,-1, 1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,  82),I=1,10) /-1,-1, 1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,  83),I=1,10) /-1,-1, 1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,  84),I=1,10) /-1,-1, 1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,  85),I=1,10) /-1,-1, 1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,  86),I=1,10) /-1,-1, 1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,  87),I=1,10) /-1,-1, 1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,  88),I=1,10) /-1,-1, 1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,  89),I=1,10) /-1,-1, 1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,  90),I=1,10) /-1,-1, 1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,  91),I=1,10) /-1,-1, 1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,  92),I=1,10) /-1,-1, 1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,  93),I=1,10) /-1,-1, 1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,  94),I=1,10) /-1,-1, 1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,  95),I=1,10) /-1,-1, 1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,  96),I=1,10) /-1,-1, 1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I,  97),I=1,10) /-1,-1, 1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,  98),I=1,10) /-1,-1, 1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,  99),I=1,10) /-1,-1, 1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 100),I=1,10) /-1,-1, 1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 101),I=1,10) /-1,-1, 1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 102),I=1,10) /-1,-1, 1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 103),I=1,10) /-1,-1, 1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 104),I=1,10) /-1,-1, 1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 105),I=1,10) /-1,-1, 1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 106),I=1,10) /-1,-1, 1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 107),I=1,10) /-1,-1, 1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 108),I=1,10) /-1,-1, 1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 109),I=1,10) /-1,-1, 1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 110),I=1,10) /-1,-1, 1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 111),I=1,10) /-1,-1, 1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 112),I=1,10) /-1,-1, 1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 113),I=1,10) /-1,-1, 1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 114),I=1,10) /-1,-1, 1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 115),I=1,10) /-1,-1, 1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 116),I=1,10) /-1,-1, 1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 117),I=1,10) /-1,-1, 1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 118),I=1,10) /-1,-1, 1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 119),I=1,10) /-1,-1, 1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 120),I=1,10) /-1,-1, 1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 121),I=1,10) /-1,-1, 1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 122),I=1,10) /-1,-1, 1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 123),I=1,10) /-1,-1, 1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 124),I=1,10) /-1,-1, 1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 125),I=1,10) /-1,-1, 1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 126),I=1,10) /-1,-1, 1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 127),I=1,10) /-1,-1, 1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 128),I=1,10) /-1,-1, 1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 129),I=1,10) /-1,-1,-1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 130),I=1,10) /-1,-1,-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 131),I=1,10) /-1,-1,-1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 132),I=1,10) /-1,-1,-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 133),I=1,10) /-1,-1,-1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 134),I=1,10) /-1,-1,-1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 135),I=1,10) /-1,-1,-1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 136),I=1,10) /-1,-1,-1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 137),I=1,10) /-1,-1,-1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 138),I=1,10) /-1,-1,-1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 139),I=1,10) /-1,-1,-1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 140),I=1,10) /-1,-1,-1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 141),I=1,10) /-1,-1,-1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 142),I=1,10) /-1,-1,-1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 143),I=1,10) /-1,-1,-1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 144),I=1,10) /-1,-1,-1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 145),I=1,10) /-1,-1,-1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 146),I=1,10) /-1,-1,-1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 147),I=1,10) /-1,-1,-1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 148),I=1,10) /-1,-1,-1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 149),I=1,10) /-1,-1,-1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 150),I=1,10) /-1,-1,-1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 151),I=1,10) /-1,-1,-1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 152),I=1,10) /-1,-1,-1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 153),I=1,10) /-1,-1,-1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 154),I=1,10) /-1,-1,-1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 155),I=1,10) /-1,-1,-1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 156),I=1,10) /-1,-1,-1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 157),I=1,10) /-1,-1,-1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 158),I=1,10) /-1,-1,-1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 159),I=1,10) /-1,-1,-1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 160),I=1,10) /-1,-1,-1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 161),I=1,10) /-1,-1,-1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 162),I=1,10) /-1,-1,-1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 163),I=1,10) /-1,-1,-1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 164),I=1,10) /-1,-1,-1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 165),I=1,10) /-1,-1,-1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 166),I=1,10) /-1,-1,-1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 167),I=1,10) /-1,-1,-1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 168),I=1,10) /-1,-1,-1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 169),I=1,10) /-1,-1,-1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 170),I=1,10) /-1,-1,-1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 171),I=1,10) /-1,-1,-1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 172),I=1,10) /-1,-1,-1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 173),I=1,10) /-1,-1,-1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 174),I=1,10) /-1,-1,-1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 175),I=1,10) /-1,-1,-1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 176),I=1,10) /-1,-1,-1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 177),I=1,10) /-1,-1,-1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 178),I=1,10) /-1,-1,-1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 179),I=1,10) /-1,-1,-1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 180),I=1,10) /-1,-1,-1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 181),I=1,10) /-1,-1,-1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 182),I=1,10) /-1,-1,-1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 183),I=1,10) /-1,-1,-1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 184),I=1,10) /-1,-1,-1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 185),I=1,10) /-1,-1,-1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 186),I=1,10) /-1,-1,-1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 187),I=1,10) /-1,-1,-1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 188),I=1,10) /-1,-1,-1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 189),I=1,10) /-1,-1,-1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 190),I=1,10) /-1,-1,-1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 191),I=1,10) /-1,-1,-1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 192),I=1,10) /-1,-1,-1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 193),I=1,10) /-1,-1,-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 194),I=1,10) /-1,-1,-1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 195),I=1,10) /-1,-1,-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 196),I=1,10) /-1,-1,-1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 197),I=1,10) /-1,-1,-1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 198),I=1,10) /-1,-1,-1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 199),I=1,10) /-1,-1,-1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 200),I=1,10) /-1,-1,-1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 201),I=1,10) /-1,-1,-1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 202),I=1,10) /-1,-1,-1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 203),I=1,10) /-1,-1,-1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 204),I=1,10) /-1,-1,-1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 205),I=1,10) /-1,-1,-1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 206),I=1,10) /-1,-1,-1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 207),I=1,10) /-1,-1,-1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 208),I=1,10) /-1,-1,-1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 209),I=1,10) /-1,-1,-1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 210),I=1,10) /-1,-1,-1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 211),I=1,10) /-1,-1,-1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 212),I=1,10) /-1,-1,-1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 213),I=1,10) /-1,-1,-1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 214),I=1,10) /-1,-1,-1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 215),I=1,10) /-1,-1,-1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 216),I=1,10) /-1,-1,-1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 217),I=1,10) /-1,-1,-1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 218),I=1,10) /-1,-1,-1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 219),I=1,10) /-1,-1,-1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 220),I=1,10) /-1,-1,-1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 221),I=1,10) /-1,-1,-1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 222),I=1,10) /-1,-1,-1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 223),I=1,10) /-1,-1,-1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 224),I=1,10) /-1,-1,-1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 225),I=1,10) /-1,-1,-1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 226),I=1,10) /-1,-1,-1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 227),I=1,10) /-1,-1,-1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 228),I=1,10) /-1,-1,-1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 229),I=1,10) /-1,-1,-1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 230),I=1,10) /-1,-1,-1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 231),I=1,10) /-1,-1,-1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 232),I=1,10) /-1,-1,-1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 233),I=1,10) /-1,-1,-1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 234),I=1,10) /-1,-1,-1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 235),I=1,10) /-1,-1,-1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 236),I=1,10) /-1,-1,-1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 237),I=1,10) /-1,-1,-1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 238),I=1,10) /-1,-1,-1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 239),I=1,10) /-1,-1,-1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 240),I=1,10) /-1,-1,-1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 241),I=1,10) /-1,-1,-1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 242),I=1,10) /-1,-1,-1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 243),I=1,10) /-1,-1,-1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 244),I=1,10) /-1,-1,-1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 245),I=1,10) /-1,-1,-1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 246),I=1,10) /-1,-1,-1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 247),I=1,10) /-1,-1,-1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 248),I=1,10) /-1,-1,-1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 249),I=1,10) /-1,-1,-1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 250),I=1,10) /-1,-1,-1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 251),I=1,10) /-1,-1,-1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 252),I=1,10) /-1,-1,-1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 253),I=1,10) /-1,-1,-1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 254),I=1,10) /-1,-1,-1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 255),I=1,10) /-1,-1,-1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 256),I=1,10) /-1,-1,-1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 257),I=1,10) /-1, 1, 1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 258),I=1,10) /-1, 1, 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 259),I=1,10) /-1, 1, 1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 260),I=1,10) /-1, 1, 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 261),I=1,10) /-1, 1, 1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 262),I=1,10) /-1, 1, 1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 263),I=1,10) /-1, 1, 1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 264),I=1,10) /-1, 1, 1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 265),I=1,10) /-1, 1, 1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 266),I=1,10) /-1, 1, 1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 267),I=1,10) /-1, 1, 1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 268),I=1,10) /-1, 1, 1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 269),I=1,10) /-1, 1, 1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 270),I=1,10) /-1, 1, 1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 271),I=1,10) /-1, 1, 1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 272),I=1,10) /-1, 1, 1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 273),I=1,10) /-1, 1, 1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 274),I=1,10) /-1, 1, 1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 275),I=1,10) /-1, 1, 1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 276),I=1,10) /-1, 1, 1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 277),I=1,10) /-1, 1, 1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 278),I=1,10) /-1, 1, 1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 279),I=1,10) /-1, 1, 1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 280),I=1,10) /-1, 1, 1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 281),I=1,10) /-1, 1, 1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 282),I=1,10) /-1, 1, 1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 283),I=1,10) /-1, 1, 1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 284),I=1,10) /-1, 1, 1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 285),I=1,10) /-1, 1, 1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 286),I=1,10) /-1, 1, 1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 287),I=1,10) /-1, 1, 1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 288),I=1,10) /-1, 1, 1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 289),I=1,10) /-1, 1, 1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 290),I=1,10) /-1, 1, 1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 291),I=1,10) /-1, 1, 1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 292),I=1,10) /-1, 1, 1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 293),I=1,10) /-1, 1, 1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 294),I=1,10) /-1, 1, 1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 295),I=1,10) /-1, 1, 1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 296),I=1,10) /-1, 1, 1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 297),I=1,10) /-1, 1, 1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 298),I=1,10) /-1, 1, 1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 299),I=1,10) /-1, 1, 1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 300),I=1,10) /-1, 1, 1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 301),I=1,10) /-1, 1, 1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 302),I=1,10) /-1, 1, 1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 303),I=1,10) /-1, 1, 1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 304),I=1,10) /-1, 1, 1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 305),I=1,10) /-1, 1, 1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 306),I=1,10) /-1, 1, 1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 307),I=1,10) /-1, 1, 1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 308),I=1,10) /-1, 1, 1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 309),I=1,10) /-1, 1, 1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 310),I=1,10) /-1, 1, 1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 311),I=1,10) /-1, 1, 1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 312),I=1,10) /-1, 1, 1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 313),I=1,10) /-1, 1, 1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 314),I=1,10) /-1, 1, 1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 315),I=1,10) /-1, 1, 1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 316),I=1,10) /-1, 1, 1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 317),I=1,10) /-1, 1, 1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 318),I=1,10) /-1, 1, 1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 319),I=1,10) /-1, 1, 1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 320),I=1,10) /-1, 1, 1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 321),I=1,10) /-1, 1, 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 322),I=1,10) /-1, 1, 1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 323),I=1,10) /-1, 1, 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 324),I=1,10) /-1, 1, 1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 325),I=1,10) /-1, 1, 1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 326),I=1,10) /-1, 1, 1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 327),I=1,10) /-1, 1, 1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 328),I=1,10) /-1, 1, 1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 329),I=1,10) /-1, 1, 1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 330),I=1,10) /-1, 1, 1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 331),I=1,10) /-1, 1, 1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 332),I=1,10) /-1, 1, 1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 333),I=1,10) /-1, 1, 1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 334),I=1,10) /-1, 1, 1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 335),I=1,10) /-1, 1, 1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 336),I=1,10) /-1, 1, 1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 337),I=1,10) /-1, 1, 1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 338),I=1,10) /-1, 1, 1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 339),I=1,10) /-1, 1, 1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 340),I=1,10) /-1, 1, 1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 341),I=1,10) /-1, 1, 1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 342),I=1,10) /-1, 1, 1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 343),I=1,10) /-1, 1, 1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 344),I=1,10) /-1, 1, 1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 345),I=1,10) /-1, 1, 1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 346),I=1,10) /-1, 1, 1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 347),I=1,10) /-1, 1, 1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 348),I=1,10) /-1, 1, 1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 349),I=1,10) /-1, 1, 1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 350),I=1,10) /-1, 1, 1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 351),I=1,10) /-1, 1, 1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 352),I=1,10) /-1, 1, 1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 353),I=1,10) /-1, 1, 1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 354),I=1,10) /-1, 1, 1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 355),I=1,10) /-1, 1, 1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 356),I=1,10) /-1, 1, 1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 357),I=1,10) /-1, 1, 1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 358),I=1,10) /-1, 1, 1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 359),I=1,10) /-1, 1, 1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 360),I=1,10) /-1, 1, 1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 361),I=1,10) /-1, 1, 1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 362),I=1,10) /-1, 1, 1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 363),I=1,10) /-1, 1, 1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 364),I=1,10) /-1, 1, 1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 365),I=1,10) /-1, 1, 1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 366),I=1,10) /-1, 1, 1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 367),I=1,10) /-1, 1, 1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 368),I=1,10) /-1, 1, 1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 369),I=1,10) /-1, 1, 1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 370),I=1,10) /-1, 1, 1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 371),I=1,10) /-1, 1, 1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 372),I=1,10) /-1, 1, 1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 373),I=1,10) /-1, 1, 1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 374),I=1,10) /-1, 1, 1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 375),I=1,10) /-1, 1, 1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 376),I=1,10) /-1, 1, 1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 377),I=1,10) /-1, 1, 1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 378),I=1,10) /-1, 1, 1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 379),I=1,10) /-1, 1, 1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 380),I=1,10) /-1, 1, 1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 381),I=1,10) /-1, 1, 1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 382),I=1,10) /-1, 1, 1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 383),I=1,10) /-1, 1, 1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 384),I=1,10) /-1, 1, 1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 385),I=1,10) /-1, 1,-1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 386),I=1,10) /-1, 1,-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 387),I=1,10) /-1, 1,-1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 388),I=1,10) /-1, 1,-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 389),I=1,10) /-1, 1,-1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 390),I=1,10) /-1, 1,-1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 391),I=1,10) /-1, 1,-1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 392),I=1,10) /-1, 1,-1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 393),I=1,10) /-1, 1,-1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 394),I=1,10) /-1, 1,-1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 395),I=1,10) /-1, 1,-1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 396),I=1,10) /-1, 1,-1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 397),I=1,10) /-1, 1,-1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 398),I=1,10) /-1, 1,-1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 399),I=1,10) /-1, 1,-1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 400),I=1,10) /-1, 1,-1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 401),I=1,10) /-1, 1,-1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 402),I=1,10) /-1, 1,-1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 403),I=1,10) /-1, 1,-1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 404),I=1,10) /-1, 1,-1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 405),I=1,10) /-1, 1,-1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 406),I=1,10) /-1, 1,-1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 407),I=1,10) /-1, 1,-1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 408),I=1,10) /-1, 1,-1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 409),I=1,10) /-1, 1,-1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 410),I=1,10) /-1, 1,-1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 411),I=1,10) /-1, 1,-1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 412),I=1,10) /-1, 1,-1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 413),I=1,10) /-1, 1,-1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 414),I=1,10) /-1, 1,-1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 415),I=1,10) /-1, 1,-1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 416),I=1,10) /-1, 1,-1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 417),I=1,10) /-1, 1,-1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 418),I=1,10) /-1, 1,-1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 419),I=1,10) /-1, 1,-1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 420),I=1,10) /-1, 1,-1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 421),I=1,10) /-1, 1,-1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 422),I=1,10) /-1, 1,-1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 423),I=1,10) /-1, 1,-1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 424),I=1,10) /-1, 1,-1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 425),I=1,10) /-1, 1,-1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 426),I=1,10) /-1, 1,-1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 427),I=1,10) /-1, 1,-1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 428),I=1,10) /-1, 1,-1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 429),I=1,10) /-1, 1,-1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 430),I=1,10) /-1, 1,-1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 431),I=1,10) /-1, 1,-1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 432),I=1,10) /-1, 1,-1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 433),I=1,10) /-1, 1,-1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 434),I=1,10) /-1, 1,-1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 435),I=1,10) /-1, 1,-1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 436),I=1,10) /-1, 1,-1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 437),I=1,10) /-1, 1,-1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 438),I=1,10) /-1, 1,-1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 439),I=1,10) /-1, 1,-1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 440),I=1,10) /-1, 1,-1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 441),I=1,10) /-1, 1,-1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 442),I=1,10) /-1, 1,-1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 443),I=1,10) /-1, 1,-1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 444),I=1,10) /-1, 1,-1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 445),I=1,10) /-1, 1,-1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 446),I=1,10) /-1, 1,-1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 447),I=1,10) /-1, 1,-1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 448),I=1,10) /-1, 1,-1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 449),I=1,10) /-1, 1,-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 450),I=1,10) /-1, 1,-1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 451),I=1,10) /-1, 1,-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 452),I=1,10) /-1, 1,-1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 453),I=1,10) /-1, 1,-1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 454),I=1,10) /-1, 1,-1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 455),I=1,10) /-1, 1,-1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 456),I=1,10) /-1, 1,-1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 457),I=1,10) /-1, 1,-1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 458),I=1,10) /-1, 1,-1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 459),I=1,10) /-1, 1,-1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 460),I=1,10) /-1, 1,-1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 461),I=1,10) /-1, 1,-1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 462),I=1,10) /-1, 1,-1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 463),I=1,10) /-1, 1,-1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 464),I=1,10) /-1, 1,-1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 465),I=1,10) /-1, 1,-1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 466),I=1,10) /-1, 1,-1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 467),I=1,10) /-1, 1,-1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 468),I=1,10) /-1, 1,-1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 469),I=1,10) /-1, 1,-1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 470),I=1,10) /-1, 1,-1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 471),I=1,10) /-1, 1,-1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 472),I=1,10) /-1, 1,-1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 473),I=1,10) /-1, 1,-1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 474),I=1,10) /-1, 1,-1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 475),I=1,10) /-1, 1,-1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 476),I=1,10) /-1, 1,-1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 477),I=1,10) /-1, 1,-1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 478),I=1,10) /-1, 1,-1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 479),I=1,10) /-1, 1,-1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 480),I=1,10) /-1, 1,-1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 481),I=1,10) /-1, 1,-1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 482),I=1,10) /-1, 1,-1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 483),I=1,10) /-1, 1,-1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 484),I=1,10) /-1, 1,-1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 485),I=1,10) /-1, 1,-1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 486),I=1,10) /-1, 1,-1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 487),I=1,10) /-1, 1,-1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 488),I=1,10) /-1, 1,-1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 489),I=1,10) /-1, 1,-1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 490),I=1,10) /-1, 1,-1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 491),I=1,10) /-1, 1,-1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 492),I=1,10) /-1, 1,-1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 493),I=1,10) /-1, 1,-1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 494),I=1,10) /-1, 1,-1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 495),I=1,10) /-1, 1,-1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 496),I=1,10) /-1, 1,-1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 497),I=1,10) /-1, 1,-1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 498),I=1,10) /-1, 1,-1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 499),I=1,10) /-1, 1,-1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 500),I=1,10) /-1, 1,-1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 501),I=1,10) /-1, 1,-1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 502),I=1,10) /-1, 1,-1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 503),I=1,10) /-1, 1,-1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 504),I=1,10) /-1, 1,-1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 505),I=1,10) /-1, 1,-1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 506),I=1,10) /-1, 1,-1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 507),I=1,10) /-1, 1,-1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 508),I=1,10) /-1, 1,-1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 509),I=1,10) /-1, 1,-1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 510),I=1,10) /-1, 1,-1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 511),I=1,10) /-1, 1,-1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 512),I=1,10) /-1, 1,-1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 513),I=1,10) / 1,-1, 1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 514),I=1,10) / 1,-1, 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 515),I=1,10) / 1,-1, 1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 516),I=1,10) / 1,-1, 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 517),I=1,10) / 1,-1, 1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 518),I=1,10) / 1,-1, 1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 519),I=1,10) / 1,-1, 1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 520),I=1,10) / 1,-1, 1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 521),I=1,10) / 1,-1, 1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 522),I=1,10) / 1,-1, 1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 523),I=1,10) / 1,-1, 1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 524),I=1,10) / 1,-1, 1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 525),I=1,10) / 1,-1, 1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 526),I=1,10) / 1,-1, 1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 527),I=1,10) / 1,-1, 1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 528),I=1,10) / 1,-1, 1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 529),I=1,10) / 1,-1, 1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 530),I=1,10) / 1,-1, 1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 531),I=1,10) / 1,-1, 1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 532),I=1,10) / 1,-1, 1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 533),I=1,10) / 1,-1, 1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 534),I=1,10) / 1,-1, 1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 535),I=1,10) / 1,-1, 1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 536),I=1,10) / 1,-1, 1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 537),I=1,10) / 1,-1, 1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 538),I=1,10) / 1,-1, 1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 539),I=1,10) / 1,-1, 1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 540),I=1,10) / 1,-1, 1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 541),I=1,10) / 1,-1, 1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 542),I=1,10) / 1,-1, 1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 543),I=1,10) / 1,-1, 1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 544),I=1,10) / 1,-1, 1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 545),I=1,10) / 1,-1, 1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 546),I=1,10) / 1,-1, 1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 547),I=1,10) / 1,-1, 1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 548),I=1,10) / 1,-1, 1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 549),I=1,10) / 1,-1, 1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 550),I=1,10) / 1,-1, 1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 551),I=1,10) / 1,-1, 1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 552),I=1,10) / 1,-1, 1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 553),I=1,10) / 1,-1, 1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 554),I=1,10) / 1,-1, 1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 555),I=1,10) / 1,-1, 1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 556),I=1,10) / 1,-1, 1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 557),I=1,10) / 1,-1, 1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 558),I=1,10) / 1,-1, 1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 559),I=1,10) / 1,-1, 1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 560),I=1,10) / 1,-1, 1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 561),I=1,10) / 1,-1, 1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 562),I=1,10) / 1,-1, 1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 563),I=1,10) / 1,-1, 1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 564),I=1,10) / 1,-1, 1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 565),I=1,10) / 1,-1, 1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 566),I=1,10) / 1,-1, 1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 567),I=1,10) / 1,-1, 1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 568),I=1,10) / 1,-1, 1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 569),I=1,10) / 1,-1, 1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 570),I=1,10) / 1,-1, 1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 571),I=1,10) / 1,-1, 1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 572),I=1,10) / 1,-1, 1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 573),I=1,10) / 1,-1, 1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 574),I=1,10) / 1,-1, 1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 575),I=1,10) / 1,-1, 1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 576),I=1,10) / 1,-1, 1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 577),I=1,10) / 1,-1, 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 578),I=1,10) / 1,-1, 1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 579),I=1,10) / 1,-1, 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 580),I=1,10) / 1,-1, 1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 581),I=1,10) / 1,-1, 1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 582),I=1,10) / 1,-1, 1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 583),I=1,10) / 1,-1, 1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 584),I=1,10) / 1,-1, 1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 585),I=1,10) / 1,-1, 1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 586),I=1,10) / 1,-1, 1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 587),I=1,10) / 1,-1, 1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 588),I=1,10) / 1,-1, 1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 589),I=1,10) / 1,-1, 1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 590),I=1,10) / 1,-1, 1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 591),I=1,10) / 1,-1, 1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 592),I=1,10) / 1,-1, 1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 593),I=1,10) / 1,-1, 1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 594),I=1,10) / 1,-1, 1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 595),I=1,10) / 1,-1, 1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 596),I=1,10) / 1,-1, 1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 597),I=1,10) / 1,-1, 1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 598),I=1,10) / 1,-1, 1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 599),I=1,10) / 1,-1, 1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 600),I=1,10) / 1,-1, 1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 601),I=1,10) / 1,-1, 1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 602),I=1,10) / 1,-1, 1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 603),I=1,10) / 1,-1, 1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 604),I=1,10) / 1,-1, 1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 605),I=1,10) / 1,-1, 1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 606),I=1,10) / 1,-1, 1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 607),I=1,10) / 1,-1, 1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 608),I=1,10) / 1,-1, 1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 609),I=1,10) / 1,-1, 1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 610),I=1,10) / 1,-1, 1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 611),I=1,10) / 1,-1, 1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 612),I=1,10) / 1,-1, 1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 613),I=1,10) / 1,-1, 1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 614),I=1,10) / 1,-1, 1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 615),I=1,10) / 1,-1, 1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 616),I=1,10) / 1,-1, 1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 617),I=1,10) / 1,-1, 1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 618),I=1,10) / 1,-1, 1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 619),I=1,10) / 1,-1, 1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 620),I=1,10) / 1,-1, 1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 621),I=1,10) / 1,-1, 1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 622),I=1,10) / 1,-1, 1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 623),I=1,10) / 1,-1, 1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 624),I=1,10) / 1,-1, 1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 625),I=1,10) / 1,-1, 1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 626),I=1,10) / 1,-1, 1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 627),I=1,10) / 1,-1, 1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 628),I=1,10) / 1,-1, 1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 629),I=1,10) / 1,-1, 1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 630),I=1,10) / 1,-1, 1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 631),I=1,10) / 1,-1, 1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 632),I=1,10) / 1,-1, 1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 633),I=1,10) / 1,-1, 1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 634),I=1,10) / 1,-1, 1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 635),I=1,10) / 1,-1, 1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 636),I=1,10) / 1,-1, 1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 637),I=1,10) / 1,-1, 1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 638),I=1,10) / 1,-1, 1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 639),I=1,10) / 1,-1, 1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 640),I=1,10) / 1,-1, 1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 641),I=1,10) / 1,-1,-1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 642),I=1,10) / 1,-1,-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 643),I=1,10) / 1,-1,-1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 644),I=1,10) / 1,-1,-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 645),I=1,10) / 1,-1,-1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 646),I=1,10) / 1,-1,-1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 647),I=1,10) / 1,-1,-1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 648),I=1,10) / 1,-1,-1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 649),I=1,10) / 1,-1,-1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 650),I=1,10) / 1,-1,-1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 651),I=1,10) / 1,-1,-1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 652),I=1,10) / 1,-1,-1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 653),I=1,10) / 1,-1,-1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 654),I=1,10) / 1,-1,-1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 655),I=1,10) / 1,-1,-1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 656),I=1,10) / 1,-1,-1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 657),I=1,10) / 1,-1,-1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 658),I=1,10) / 1,-1,-1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 659),I=1,10) / 1,-1,-1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 660),I=1,10) / 1,-1,-1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 661),I=1,10) / 1,-1,-1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 662),I=1,10) / 1,-1,-1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 663),I=1,10) / 1,-1,-1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 664),I=1,10) / 1,-1,-1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 665),I=1,10) / 1,-1,-1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 666),I=1,10) / 1,-1,-1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 667),I=1,10) / 1,-1,-1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 668),I=1,10) / 1,-1,-1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 669),I=1,10) / 1,-1,-1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 670),I=1,10) / 1,-1,-1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 671),I=1,10) / 1,-1,-1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 672),I=1,10) / 1,-1,-1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 673),I=1,10) / 1,-1,-1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 674),I=1,10) / 1,-1,-1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 675),I=1,10) / 1,-1,-1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 676),I=1,10) / 1,-1,-1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 677),I=1,10) / 1,-1,-1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 678),I=1,10) / 1,-1,-1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 679),I=1,10) / 1,-1,-1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 680),I=1,10) / 1,-1,-1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 681),I=1,10) / 1,-1,-1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 682),I=1,10) / 1,-1,-1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 683),I=1,10) / 1,-1,-1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 684),I=1,10) / 1,-1,-1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 685),I=1,10) / 1,-1,-1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 686),I=1,10) / 1,-1,-1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 687),I=1,10) / 1,-1,-1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 688),I=1,10) / 1,-1,-1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 689),I=1,10) / 1,-1,-1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 690),I=1,10) / 1,-1,-1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 691),I=1,10) / 1,-1,-1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 692),I=1,10) / 1,-1,-1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 693),I=1,10) / 1,-1,-1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 694),I=1,10) / 1,-1,-1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 695),I=1,10) / 1,-1,-1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 696),I=1,10) / 1,-1,-1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 697),I=1,10) / 1,-1,-1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 698),I=1,10) / 1,-1,-1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 699),I=1,10) / 1,-1,-1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 700),I=1,10) / 1,-1,-1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 701),I=1,10) / 1,-1,-1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 702),I=1,10) / 1,-1,-1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 703),I=1,10) / 1,-1,-1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 704),I=1,10) / 1,-1,-1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 705),I=1,10) / 1,-1,-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 706),I=1,10) / 1,-1,-1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 707),I=1,10) / 1,-1,-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 708),I=1,10) / 1,-1,-1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 709),I=1,10) / 1,-1,-1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 710),I=1,10) / 1,-1,-1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 711),I=1,10) / 1,-1,-1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 712),I=1,10) / 1,-1,-1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 713),I=1,10) / 1,-1,-1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 714),I=1,10) / 1,-1,-1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 715),I=1,10) / 1,-1,-1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 716),I=1,10) / 1,-1,-1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 717),I=1,10) / 1,-1,-1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 718),I=1,10) / 1,-1,-1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 719),I=1,10) / 1,-1,-1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 720),I=1,10) / 1,-1,-1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 721),I=1,10) / 1,-1,-1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 722),I=1,10) / 1,-1,-1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 723),I=1,10) / 1,-1,-1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 724),I=1,10) / 1,-1,-1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 725),I=1,10) / 1,-1,-1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 726),I=1,10) / 1,-1,-1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 727),I=1,10) / 1,-1,-1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 728),I=1,10) / 1,-1,-1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 729),I=1,10) / 1,-1,-1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 730),I=1,10) / 1,-1,-1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 731),I=1,10) / 1,-1,-1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 732),I=1,10) / 1,-1,-1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 733),I=1,10) / 1,-1,-1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 734),I=1,10) / 1,-1,-1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 735),I=1,10) / 1,-1,-1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 736),I=1,10) / 1,-1,-1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 737),I=1,10) / 1,-1,-1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 738),I=1,10) / 1,-1,-1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 739),I=1,10) / 1,-1,-1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 740),I=1,10) / 1,-1,-1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 741),I=1,10) / 1,-1,-1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 742),I=1,10) / 1,-1,-1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 743),I=1,10) / 1,-1,-1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 744),I=1,10) / 1,-1,-1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 745),I=1,10) / 1,-1,-1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 746),I=1,10) / 1,-1,-1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 747),I=1,10) / 1,-1,-1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 748),I=1,10) / 1,-1,-1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 749),I=1,10) / 1,-1,-1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 750),I=1,10) / 1,-1,-1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 751),I=1,10) / 1,-1,-1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 752),I=1,10) / 1,-1,-1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 753),I=1,10) / 1,-1,-1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 754),I=1,10) / 1,-1,-1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 755),I=1,10) / 1,-1,-1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 756),I=1,10) / 1,-1,-1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 757),I=1,10) / 1,-1,-1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 758),I=1,10) / 1,-1,-1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 759),I=1,10) / 1,-1,-1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 760),I=1,10) / 1,-1,-1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 761),I=1,10) / 1,-1,-1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 762),I=1,10) / 1,-1,-1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 763),I=1,10) / 1,-1,-1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 764),I=1,10) / 1,-1,-1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 765),I=1,10) / 1,-1,-1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 766),I=1,10) / 1,-1,-1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 767),I=1,10) / 1,-1,-1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 768),I=1,10) / 1,-1,-1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 769),I=1,10) / 1, 1, 1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 770),I=1,10) / 1, 1, 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 771),I=1,10) / 1, 1, 1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 772),I=1,10) / 1, 1, 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 773),I=1,10) / 1, 1, 1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 774),I=1,10) / 1, 1, 1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 775),I=1,10) / 1, 1, 1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 776),I=1,10) / 1, 1, 1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 777),I=1,10) / 1, 1, 1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 778),I=1,10) / 1, 1, 1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 779),I=1,10) / 1, 1, 1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 780),I=1,10) / 1, 1, 1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 781),I=1,10) / 1, 1, 1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 782),I=1,10) / 1, 1, 1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 783),I=1,10) / 1, 1, 1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 784),I=1,10) / 1, 1, 1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 785),I=1,10) / 1, 1, 1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 786),I=1,10) / 1, 1, 1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 787),I=1,10) / 1, 1, 1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 788),I=1,10) / 1, 1, 1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 789),I=1,10) / 1, 1, 1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 790),I=1,10) / 1, 1, 1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 791),I=1,10) / 1, 1, 1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 792),I=1,10) / 1, 1, 1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 793),I=1,10) / 1, 1, 1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 794),I=1,10) / 1, 1, 1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 795),I=1,10) / 1, 1, 1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 796),I=1,10) / 1, 1, 1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 797),I=1,10) / 1, 1, 1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 798),I=1,10) / 1, 1, 1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 799),I=1,10) / 1, 1, 1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 800),I=1,10) / 1, 1, 1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 801),I=1,10) / 1, 1, 1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 802),I=1,10) / 1, 1, 1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 803),I=1,10) / 1, 1, 1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 804),I=1,10) / 1, 1, 1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 805),I=1,10) / 1, 1, 1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 806),I=1,10) / 1, 1, 1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 807),I=1,10) / 1, 1, 1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 808),I=1,10) / 1, 1, 1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 809),I=1,10) / 1, 1, 1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 810),I=1,10) / 1, 1, 1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 811),I=1,10) / 1, 1, 1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 812),I=1,10) / 1, 1, 1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 813),I=1,10) / 1, 1, 1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 814),I=1,10) / 1, 1, 1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 815),I=1,10) / 1, 1, 1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 816),I=1,10) / 1, 1, 1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 817),I=1,10) / 1, 1, 1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 818),I=1,10) / 1, 1, 1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 819),I=1,10) / 1, 1, 1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 820),I=1,10) / 1, 1, 1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 821),I=1,10) / 1, 1, 1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 822),I=1,10) / 1, 1, 1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 823),I=1,10) / 1, 1, 1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 824),I=1,10) / 1, 1, 1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 825),I=1,10) / 1, 1, 1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 826),I=1,10) / 1, 1, 1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 827),I=1,10) / 1, 1, 1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 828),I=1,10) / 1, 1, 1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 829),I=1,10) / 1, 1, 1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 830),I=1,10) / 1, 1, 1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 831),I=1,10) / 1, 1, 1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 832),I=1,10) / 1, 1, 1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 833),I=1,10) / 1, 1, 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 834),I=1,10) / 1, 1, 1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 835),I=1,10) / 1, 1, 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 836),I=1,10) / 1, 1, 1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 837),I=1,10) / 1, 1, 1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 838),I=1,10) / 1, 1, 1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 839),I=1,10) / 1, 1, 1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 840),I=1,10) / 1, 1, 1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 841),I=1,10) / 1, 1, 1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 842),I=1,10) / 1, 1, 1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 843),I=1,10) / 1, 1, 1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 844),I=1,10) / 1, 1, 1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 845),I=1,10) / 1, 1, 1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 846),I=1,10) / 1, 1, 1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 847),I=1,10) / 1, 1, 1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 848),I=1,10) / 1, 1, 1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 849),I=1,10) / 1, 1, 1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 850),I=1,10) / 1, 1, 1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 851),I=1,10) / 1, 1, 1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 852),I=1,10) / 1, 1, 1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 853),I=1,10) / 1, 1, 1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 854),I=1,10) / 1, 1, 1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 855),I=1,10) / 1, 1, 1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 856),I=1,10) / 1, 1, 1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 857),I=1,10) / 1, 1, 1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 858),I=1,10) / 1, 1, 1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 859),I=1,10) / 1, 1, 1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 860),I=1,10) / 1, 1, 1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 861),I=1,10) / 1, 1, 1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 862),I=1,10) / 1, 1, 1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 863),I=1,10) / 1, 1, 1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 864),I=1,10) / 1, 1, 1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 865),I=1,10) / 1, 1, 1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 866),I=1,10) / 1, 1, 1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 867),I=1,10) / 1, 1, 1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 868),I=1,10) / 1, 1, 1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 869),I=1,10) / 1, 1, 1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 870),I=1,10) / 1, 1, 1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 871),I=1,10) / 1, 1, 1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 872),I=1,10) / 1, 1, 1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 873),I=1,10) / 1, 1, 1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 874),I=1,10) / 1, 1, 1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 875),I=1,10) / 1, 1, 1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 876),I=1,10) / 1, 1, 1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 877),I=1,10) / 1, 1, 1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 878),I=1,10) / 1, 1, 1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 879),I=1,10) / 1, 1, 1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 880),I=1,10) / 1, 1, 1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 881),I=1,10) / 1, 1, 1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 882),I=1,10) / 1, 1, 1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 883),I=1,10) / 1, 1, 1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 884),I=1,10) / 1, 1, 1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 885),I=1,10) / 1, 1, 1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 886),I=1,10) / 1, 1, 1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 887),I=1,10) / 1, 1, 1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 888),I=1,10) / 1, 1, 1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 889),I=1,10) / 1, 1, 1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 890),I=1,10) / 1, 1, 1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 891),I=1,10) / 1, 1, 1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 892),I=1,10) / 1, 1, 1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 893),I=1,10) / 1, 1, 1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 894),I=1,10) / 1, 1, 1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 895),I=1,10) / 1, 1, 1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 896),I=1,10) / 1, 1, 1, 1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 897),I=1,10) / 1, 1,-1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 898),I=1,10) / 1, 1,-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 899),I=1,10) / 1, 1,-1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 900),I=1,10) / 1, 1,-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 901),I=1,10) / 1, 1,-1,-1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 902),I=1,10) / 1, 1,-1,-1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 903),I=1,10) / 1, 1,-1,-1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 904),I=1,10) / 1, 1,-1,-1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 905),I=1,10) / 1, 1,-1,-1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 906),I=1,10) / 1, 1,-1,-1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 907),I=1,10) / 1, 1,-1,-1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 908),I=1,10) / 1, 1,-1,-1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 909),I=1,10) / 1, 1,-1,-1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 910),I=1,10) / 1, 1,-1,-1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 911),I=1,10) / 1, 1,-1,-1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 912),I=1,10) / 1, 1,-1,-1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 913),I=1,10) / 1, 1,-1,-1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 914),I=1,10) / 1, 1,-1,-1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 915),I=1,10) / 1, 1,-1,-1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 916),I=1,10) / 1, 1,-1,-1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 917),I=1,10) / 1, 1,-1,-1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 918),I=1,10) / 1, 1,-1,-1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 919),I=1,10) / 1, 1,-1,-1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 920),I=1,10) / 1, 1,-1,-1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 921),I=1,10) / 1, 1,-1,-1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 922),I=1,10) / 1, 1,-1,-1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 923),I=1,10) / 1, 1,-1,-1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 924),I=1,10) / 1, 1,-1,-1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 925),I=1,10) / 1, 1,-1,-1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 926),I=1,10) / 1, 1,-1,-1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 927),I=1,10) / 1, 1,-1,-1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 928),I=1,10) / 1, 1,-1,-1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 929),I=1,10) / 1, 1,-1,-1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 930),I=1,10) / 1, 1,-1,-1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 931),I=1,10) / 1, 1,-1,-1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 932),I=1,10) / 1, 1,-1,-1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 933),I=1,10) / 1, 1,-1,-1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 934),I=1,10) / 1, 1,-1,-1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 935),I=1,10) / 1, 1,-1,-1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 936),I=1,10) / 1, 1,-1,-1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 937),I=1,10) / 1, 1,-1,-1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 938),I=1,10) / 1, 1,-1,-1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 939),I=1,10) / 1, 1,-1,-1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 940),I=1,10) / 1, 1,-1,-1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 941),I=1,10) / 1, 1,-1,-1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 942),I=1,10) / 1, 1,-1,-1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 943),I=1,10) / 1, 1,-1,-1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 944),I=1,10) / 1, 1,-1,-1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 945),I=1,10) / 1, 1,-1,-1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 946),I=1,10) / 1, 1,-1,-1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 947),I=1,10) / 1, 1,-1,-1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 948),I=1,10) / 1, 1,-1,-1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 949),I=1,10) / 1, 1,-1,-1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 950),I=1,10) / 1, 1,-1,-1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 951),I=1,10) / 1, 1,-1,-1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 952),I=1,10) / 1, 1,-1,-1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 953),I=1,10) / 1, 1,-1,-1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 954),I=1,10) / 1, 1,-1,-1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 955),I=1,10) / 1, 1,-1,-1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 956),I=1,10) / 1, 1,-1,-1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 957),I=1,10) / 1, 1,-1,-1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 958),I=1,10) / 1, 1,-1,-1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 959),I=1,10) / 1, 1,-1,-1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 960),I=1,10) / 1, 1,-1,-1,-1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 961),I=1,10) / 1, 1,-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 962),I=1,10) / 1, 1,-1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 963),I=1,10) / 1, 1,-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 964),I=1,10) / 1, 1,-1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 965),I=1,10) / 1, 1,-1, 1, 1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 966),I=1,10) / 1, 1,-1, 1, 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 967),I=1,10) / 1, 1,-1, 1, 1,-1,-1,-1,-1, 1/
      DATA (NHEL(I, 968),I=1,10) / 1, 1,-1, 1, 1,-1,-1,-1,-1,-1/
      DATA (NHEL(I, 969),I=1,10) / 1, 1,-1, 1, 1,-1, 1, 1, 1, 1/
      DATA (NHEL(I, 970),I=1,10) / 1, 1,-1, 1, 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I, 971),I=1,10) / 1, 1,-1, 1, 1,-1, 1, 1,-1, 1/
      DATA (NHEL(I, 972),I=1,10) / 1, 1,-1, 1, 1,-1, 1, 1,-1,-1/
      DATA (NHEL(I, 973),I=1,10) / 1, 1,-1, 1, 1,-1, 1,-1, 1, 1/
      DATA (NHEL(I, 974),I=1,10) / 1, 1,-1, 1, 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I, 975),I=1,10) / 1, 1,-1, 1, 1,-1, 1,-1,-1, 1/
      DATA (NHEL(I, 976),I=1,10) / 1, 1,-1, 1, 1,-1, 1,-1,-1,-1/
      DATA (NHEL(I, 977),I=1,10) / 1, 1,-1, 1, 1, 1,-1, 1, 1, 1/
      DATA (NHEL(I, 978),I=1,10) / 1, 1,-1, 1, 1, 1,-1, 1, 1,-1/
      DATA (NHEL(I, 979),I=1,10) / 1, 1,-1, 1, 1, 1,-1, 1,-1, 1/
      DATA (NHEL(I, 980),I=1,10) / 1, 1,-1, 1, 1, 1,-1, 1,-1,-1/
      DATA (NHEL(I, 981),I=1,10) / 1, 1,-1, 1, 1, 1,-1,-1, 1, 1/
      DATA (NHEL(I, 982),I=1,10) / 1, 1,-1, 1, 1, 1,-1,-1, 1,-1/
      DATA (NHEL(I, 983),I=1,10) / 1, 1,-1, 1, 1, 1,-1,-1,-1, 1/
      DATA (NHEL(I, 984),I=1,10) / 1, 1,-1, 1, 1, 1,-1,-1,-1,-1/
      DATA (NHEL(I, 985),I=1,10) / 1, 1,-1, 1, 1, 1, 1, 1, 1, 1/
      DATA (NHEL(I, 986),I=1,10) / 1, 1,-1, 1, 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I, 987),I=1,10) / 1, 1,-1, 1, 1, 1, 1, 1,-1, 1/
      DATA (NHEL(I, 988),I=1,10) / 1, 1,-1, 1, 1, 1, 1, 1,-1,-1/
      DATA (NHEL(I, 989),I=1,10) / 1, 1,-1, 1, 1, 1, 1,-1, 1, 1/
      DATA (NHEL(I, 990),I=1,10) / 1, 1,-1, 1, 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I, 991),I=1,10) / 1, 1,-1, 1, 1, 1, 1,-1,-1, 1/
      DATA (NHEL(I, 992),I=1,10) / 1, 1,-1, 1, 1, 1, 1,-1,-1,-1/
      DATA (NHEL(I, 993),I=1,10) / 1, 1,-1, 1,-1,-1,-1, 1, 1, 1/
      DATA (NHEL(I, 994),I=1,10) / 1, 1,-1, 1,-1,-1,-1, 1, 1,-1/
      DATA (NHEL(I, 995),I=1,10) / 1, 1,-1, 1,-1,-1,-1, 1,-1, 1/
      DATA (NHEL(I, 996),I=1,10) / 1, 1,-1, 1,-1,-1,-1, 1,-1,-1/
      DATA (NHEL(I, 997),I=1,10) / 1, 1,-1, 1,-1,-1,-1,-1, 1, 1/
      DATA (NHEL(I, 998),I=1,10) / 1, 1,-1, 1,-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I, 999),I=1,10) / 1, 1,-1, 1,-1,-1,-1,-1,-1, 1/
      DATA (NHEL(I,1000),I=1,10) / 1, 1,-1, 1,-1,-1,-1,-1,-1,-1/
      DATA (NHEL(I,1001),I=1,10) / 1, 1,-1, 1,-1,-1, 1, 1, 1, 1/
      DATA (NHEL(I,1002),I=1,10) / 1, 1,-1, 1,-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,1003),I=1,10) / 1, 1,-1, 1,-1,-1, 1, 1,-1, 1/
      DATA (NHEL(I,1004),I=1,10) / 1, 1,-1, 1,-1,-1, 1, 1,-1,-1/
      DATA (NHEL(I,1005),I=1,10) / 1, 1,-1, 1,-1,-1, 1,-1, 1, 1/
      DATA (NHEL(I,1006),I=1,10) / 1, 1,-1, 1,-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,1007),I=1,10) / 1, 1,-1, 1,-1,-1, 1,-1,-1, 1/
      DATA (NHEL(I,1008),I=1,10) / 1, 1,-1, 1,-1,-1, 1,-1,-1,-1/
      DATA (NHEL(I,1009),I=1,10) / 1, 1,-1, 1,-1, 1,-1, 1, 1, 1/
      DATA (NHEL(I,1010),I=1,10) / 1, 1,-1, 1,-1, 1,-1, 1, 1,-1/
      DATA (NHEL(I,1011),I=1,10) / 1, 1,-1, 1,-1, 1,-1, 1,-1, 1/
      DATA (NHEL(I,1012),I=1,10) / 1, 1,-1, 1,-1, 1,-1, 1,-1,-1/
      DATA (NHEL(I,1013),I=1,10) / 1, 1,-1, 1,-1, 1,-1,-1, 1, 1/
      DATA (NHEL(I,1014),I=1,10) / 1, 1,-1, 1,-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,1015),I=1,10) / 1, 1,-1, 1,-1, 1,-1,-1,-1, 1/
      DATA (NHEL(I,1016),I=1,10) / 1, 1,-1, 1,-1, 1,-1,-1,-1,-1/
      DATA (NHEL(I,1017),I=1,10) / 1, 1,-1, 1,-1, 1, 1, 1, 1, 1/
      DATA (NHEL(I,1018),I=1,10) / 1, 1,-1, 1,-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,1019),I=1,10) / 1, 1,-1, 1,-1, 1, 1, 1,-1, 1/
      DATA (NHEL(I,1020),I=1,10) / 1, 1,-1, 1,-1, 1, 1, 1,-1,-1/
      DATA (NHEL(I,1021),I=1,10) / 1, 1,-1, 1,-1, 1, 1,-1, 1, 1/
      DATA (NHEL(I,1022),I=1,10) / 1, 1,-1, 1,-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,1023),I=1,10) / 1, 1,-1, 1,-1, 1, 1,-1,-1, 1/
      DATA (NHEL(I,1024),I=1,10) / 1, 1,-1, 1,-1, 1, 1,-1,-1,-1/
      DATA IDEN/36/

C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES

C     ----------
C     BEGIN CODE
C     ----------

      NTRY(IMIRROR)=NTRY(IMIRROR)+1
      THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (MULTI_CHANNEL) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=1
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
      DO I=1,NCOMB
        TS(I)=0D0
      ENDDO

        !   If the helicity grid status is 0, this means that it is not yet initialized.
        !   If HEL_PICKED==-1, this means that calls to other matrix<i> where in initialization mode as well for the helicity.
      IF ((ISHEL(IMIRROR).EQ.0.AND.ISUM_HEL.EQ.0)
     $ .OR.(DS_GET_DIM_STATUS('Helicity').EQ.0).OR.(HEL_PICKED.EQ.-1))
     $  THEN
        DO I=1,NCOMB
          IF (GOODHEL(I,IMIRROR) .OR. NTRY(IMIRROR)
     $     .LE.MAXTRIES.OR.(ISUM_HEL.NE.0).OR.THIS_NTRY(IMIRROR).LE.10)
     $      THEN
            T=MATRIX14(P ,NHEL(1,I),JC(1),I)

            DO JJ=1,NINCOMING
              IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))
     $         )) THEN
                T=T*ABS(POL(JJ))
              ELSE IF(POL(JJ).NE.1D0)THEN
                T=T*(2D0-ABS(POL(JJ)))
              ENDIF
            ENDDO

            IF (ISUM_HEL.NE.0.AND.DS_GET_DIM_STATUS('Helicity')
     $       .EQ.0.AND.ALLOW_HELICITY_GRID_ENTRIES) THEN
              CALL DS_ADD_ENTRY('Helicity',I,T)
            ENDIF
            ANS=ANS+DABS(T)
            TS(I)=T
          ENDIF
        ENDDO
        IF(NTRY(IMIRROR).EQ.(MAXTRIES+1)) THEN
          CALL RESET_CUMULATIVE_VARIABLE()  ! avoid biais of the initialization
        ENDIF
        IF (ISUM_HEL.NE.0) THEN
            !         We set HEL_PICKED to -1 here so that later on, the call to DS_add_point in dsample.f does not add anything to the grid since it was already done here.
          HEL_PICKED = -1
            !         For safety, hardset the helicity sampling jacobian to 0.0d0 to make sure it is not .
          HEL_JACOBIAN   = 1.0D0
            !         We don't want to re-update the helicity grid if it was already updated by another matrix<i>, so we make sure that the reference grid is empty.
          REF_HELICITY_GRID = DS_GET_DIMENSION(REF_GRID,'Helicity')
          IF((DS_GET_DIM_STATUS('Helicity').EQ.1)
     $     .AND.(REF_HELICITY_GRID%N_TOT_ENTRIES.EQ.0)) THEN
              !           If we finished the initialization we can update the grid so as to start sampling over it.
              !           However the grid will now be filled by dsample with different kind of weights (including pdf, flux, etc...) so by setting the grid_mode of the reference grid to 'initialization' we make sure it will be overwritten (as opposed to 'combined') by the running grid at the next update.
            CALL DS_UPDATE_GRID('Helicity')
            CALL DS_SET_GRID_MODE('Helicity','init')
          ENDIF
        ELSE
          JHEL(IMIRROR) = 1
          IF(NTRY(IMIRROR).LE.MAXTRIES.OR.THIS_NTRY(IMIRROR).LE.10)THEN
            DO I=1,NCOMB
              IF(INIT_MODE) THEN
                IF (DABS(TS(I)).GT.ANS*LIMHEL/NCOMB) THEN
                  PRINT *, 'Matrix Element/Good Helicity: 14 ', I,
     $              'IMIRROR', IMIRROR
                ENDIF
              ELSE IF (.NOT.GOODHEL(I,IMIRROR) .AND. (DABS(TS(I))
     $         .GT.ANS*LIMHEL/NCOMB)) THEN
                GOODHEL(I,IMIRROR)=.TRUE.
                NGOOD(IMIRROR) = NGOOD(IMIRROR) +1
                IGOOD(NGOOD(IMIRROR),IMIRROR) = I
                PRINT *,'Added good helicity ',I,TS(I)*NCOMB/ANS,' in'
     $           //' event ',NTRY(IMIRROR), 'local:',THIS_NTRY(IMIRROR)
              ENDIF
            ENDDO
          ENDIF
          IF(NTRY(IMIRROR).EQ.MAXTRIES)THEN
            ISHEL(IMIRROR)=MIN(ISUM_HEL,NGOOD(IMIRROR))
          ENDIF
        ENDIF
      ELSE IF (.NOT.INIT_MODE) THEN  ! random helicity 
C       The helicity configuration was chosen already by genps and put
C        in a common block defined in genps.inc.
        I = HEL_PICKED

        T=MATRIX14(P ,NHEL(1,I),JC(1),I)


        DO JJ=1,NINCOMING
          IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))
          ELSE IF(POL(JJ).NE.1D0)THEN
            T=T*(2D0-ABS(POL(JJ)))
          ENDIF
        ENDDO

C       Always one helicity at a time
        ANS = T
C       Include the Jacobian from helicity sampling
        ANS = ANS * HEL_JACOBIAN

        WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
      ELSE
        ANS = 1D0
        RETURN
      ENDIF
      IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
        CALL RANMAR(R)
        SUMHEL=0D0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(14, I)
          IF (J.NE.0) THEN
            IF(SDE_STRAT.EQ.1) THEN
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ELSE
              AMP2(J) = GET_CHANNEL_CUT(P, I)
              XTOT=XTOT+AMP2(J)
            ENDIF
          ENDIF
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(14))/XTOT
        ELSE IF(ANS.NE.0D0) THEN
          IF(NB_FAIL.GE.10)THEN
            WRITE(*,*) 'Problem in the multi-channeling. All amp2 are'
     $       //' zero but not the total matrix-element'

            STOP 1
          ELSE
            NB_FAIL = NB_FAIL +1
          ENDIF
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      REAL*8 FUNCTION MATRIX14(P,NHEL,IC, IHEL)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.5.1, 2023-07-11
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: d~ s~ > w+ w+ h u~ c~ QCD=0 QED<=5 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=144)
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=1024)
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=42, NCOLOR=1)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      INTEGER IHEL
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      COMPLEX*16 ZTEMP, TMP_JAMP(0)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/

      DOUBLE PRECISION FK_MDL_WH
      DOUBLE PRECISION FK_ZERO
      DOUBLE PRECISION FK_MDL_WW
      DOUBLE PRECISION FK_MDL_WZ
      SAVE FK_MDL_WH
      SAVE FK_ZERO
      SAVE FK_MDL_WW
      SAVE FK_MDL_WZ

      LOGICAL FIRST
      DATA FIRST /.TRUE./
      SAVE FIRST
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX14
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2
      INCLUDE 'coupl.inc'

      DOUBLE PRECISION SMALL_WIDTH_TREATMENT
      COMMON/NARROW_WIDTH/SMALL_WIDTH_TREATMENT

      LOGICAL INIT_MODE
      COMMON/TO_DETERMINE_ZERO_HEL/INIT_MODE

      LOGICAL ZEROAMP_14(NCOMB,NGRAPHS)
      COMMON/TO_ZEROAMP_14/ZEROAMP_14

      DOUBLE PRECISION TMIN_FOR_CHANNEL
      INTEGER SDE_STRAT  ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      COMMON/TO_CHANNEL_STRAT/TMIN_FOR_CHANNEL,	SDE_STRAT

C     
C     COLOR DATA
C     
      DATA (CF(I,  1),I=  1,  1) /2.700000000000000D+01/
C     1 T(1,9) T(2,10) T(7,8)
C     ----------
C     BEGIN CODE
C     ----------
      IF (FIRST) THEN
        FIRST=.FALSE.
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(ZERO.NE.0D0) FK_ZERO = SIGN(MAX(ABS(ZERO), ABS(MDL_MB
     $   *SMALL_WIDTH_TREATMENT)), ZERO)
        IF(MDL_WH.NE.0D0) FK_MDL_WH = SIGN(MAX(ABS(MDL_WH), ABS(MDL_MH
     $   *SMALL_WIDTH_TREATMENT)), MDL_WH)
        IF(MDL_WW.NE.0D0) FK_MDL_WW = SIGN(MAX(ABS(MDL_WW), ABS(MDL_MW
     $   *SMALL_WIDTH_TREATMENT)), MDL_WW)
        IF(MDL_WZ.NE.0D0) FK_MDL_WZ = SIGN(MAX(ABS(MDL_WZ), ABS(MDL_MZ
     $   *SMALL_WIDTH_TREATMENT)), MDL_WZ)

        IF(INIT_MODE) THEN
          ZEROAMP_14(:,:) = .TRUE.
        ENDIF
      ENDIF


      CALL OXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
      CALL OXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
      CALL IXXXXX(P(0,3),ZERO,NHEL(3),-1*IC(3),W(1,3))
      CALL OXXXXX(P(0,4),ZERO,NHEL(4),+1*IC(4),W(1,4))
      CALL FFV2_3(W(1,3),W(1,4),GC_100,MDL_MW, FK_MDL_WW,W(1,5))
      CALL IXXXXX(P(0,5),ZERO,NHEL(5),-1*IC(5),W(1,4))
      CALL OXXXXX(P(0,6),ZERO,NHEL(6),+1*IC(6),W(1,3))
      CALL FFV2_3(W(1,4),W(1,3),GC_100,MDL_MW, FK_MDL_WW,W(1,6))
      CALL OXXXXX(P(0,7),MDL_MB,NHEL(7),+1*IC(7),W(1,3))
      CALL IXXXXX(P(0,8),MDL_MB,NHEL(8),-1*IC(8),W(1,4))
      CALL FFS4_3(W(1,4),W(1,3),GC_83,MDL_MH, FK_MDL_WH,W(1,7))
      CALL IXXXXX(P(0,9),ZERO,NHEL(9),-1*IC(9),W(1,4))
      CALL IXXXXX(P(0,10),ZERO,NHEL(10),-1*IC(10),W(1,3))
      CALL FFV2_2(W(1,4),W(1,5),GC_100,ZERO, FK_ZERO,W(1,8))
      CALL FFV2_2(W(1,3),W(1,6),GC_100,ZERO, FK_ZERO,W(1,9))
      CALL FFV2_3_3(W(1,8),W(1,1),GC_50,GC_58,MDL_MZ, ZERO,W(1,10))
      CALL FFV2_3_3(W(1,9),W(1,2),GC_50,GC_58,MDL_MZ, ZERO,W(1,11))
C     Amplitude(s) for diagram number 1
      CALL VVS1_0(W(1,10),W(1,11),W(1,7),GC_81,AMP(1))
      CALL FFV2_3(W(1,3),W(1,2),GC_100,MDL_MW, ZERO,W(1,12))
      CALL VVV1_3(W(1,12),W(1,6),GC_53,MDL_MZ, ZERO,W(1,13))
C     Amplitude(s) for diagram number 2
      CALL VVS1_0(W(1,10),W(1,13),W(1,7),GC_81,AMP(2))
      CALL FFV1P0_3(W(1,8),W(1,1),GC_1,ZERO, FK_ZERO,W(1,14))
      CALL VVS1_2(W(1,12),W(1,7),GC_72,MDL_MW, ZERO,W(1,15))
C     Amplitude(s) for diagram number 3
      CALL VVV1_0(W(1,14),W(1,15),W(1,6),-GC_3,AMP(3))
C     Amplitude(s) for diagram number 4
      CALL VVV1_0(W(1,15),W(1,6),W(1,10),GC_53,AMP(4))
      CALL VVS1_1(W(1,6),W(1,7),GC_72,MDL_MW, FK_MDL_WW,W(1,16))
      CALL FFV2_2(W(1,8),W(1,12),GC_100,ZERO, FK_ZERO,W(1,17))
C     Amplitude(s) for diagram number 5
      CALL FFV2_0(W(1,17),W(1,1),W(1,16),GC_100,AMP(5))
C     Amplitude(s) for diagram number 6
      CALL VVV1_0(W(1,14),W(1,12),W(1,16),-GC_3,AMP(6))
C     Amplitude(s) for diagram number 7
      CALL VVV1_0(W(1,12),W(1,16),W(1,10),GC_53,AMP(7))
      CALL FFV2_1(W(1,1),W(1,6),GC_100,ZERO, FK_ZERO,W(1,17))
      CALL FFV2_3(W(1,8),W(1,17),GC_100,MDL_MW, ZERO,W(1,18))
C     Amplitude(s) for diagram number 8
      CALL VVS1_0(W(1,12),W(1,18),W(1,7),GC_72,AMP(8))
      CALL FFV2_2(W(1,3),W(1,16),GC_100,ZERO, FK_ZERO,W(1,18))
C     Amplitude(s) for diagram number 9
      CALL FFV1_0(W(1,18),W(1,2),W(1,14),GC_1,AMP(9))
C     Amplitude(s) for diagram number 10
      CALL FFV2_3_0(W(1,18),W(1,2),W(1,10),GC_50,GC_58,AMP(10))
      CALL FFV2_1(W(1,2),W(1,16),GC_100,ZERO, FK_ZERO,W(1,8))
C     Amplitude(s) for diagram number 11
      CALL FFV1_0(W(1,3),W(1,8),W(1,14),GC_2,AMP(11))
C     Amplitude(s) for diagram number 12
      CALL FFV2_5_0(W(1,3),W(1,8),W(1,10),-GC_50,GC_58,AMP(12))
      CALL FFV2_1(W(1,2),W(1,6),GC_100,ZERO, FK_ZERO,W(1,14))
      CALL FFV2_5_3(W(1,3),W(1,14),-GC_50,GC_58,MDL_MZ, ZERO,W(1,19))
C     Amplitude(s) for diagram number 13
      CALL VVS1_0(W(1,10),W(1,19),W(1,7),GC_81,AMP(13))
      CALL FFV2_2(W(1,4),W(1,6),GC_100,ZERO, FK_ZERO,W(1,10))
      CALL FFV2_2(W(1,3),W(1,5),GC_100,ZERO, FK_ZERO,W(1,20))
      CALL FFV2_3_3(W(1,10),W(1,1),GC_50,GC_58,MDL_MZ, ZERO,W(1,21))
      CALL FFV2_3_3(W(1,20),W(1,2),GC_50,GC_58,MDL_MZ, ZERO,W(1,22))
C     Amplitude(s) for diagram number 14
      CALL VVS1_0(W(1,21),W(1,22),W(1,7),GC_81,AMP(14))
      CALL VVV1_3(W(1,12),W(1,5),GC_53,MDL_MZ, ZERO,W(1,23))
C     Amplitude(s) for diagram number 15
      CALL VVS1_0(W(1,21),W(1,23),W(1,7),GC_81,AMP(15))
      CALL FFV1P0_3(W(1,10),W(1,1),GC_1,ZERO, FK_ZERO,W(1,24))
C     Amplitude(s) for diagram number 16
      CALL VVV1_0(W(1,24),W(1,15),W(1,5),-GC_3,AMP(16))
C     Amplitude(s) for diagram number 17
      CALL VVV1_0(W(1,15),W(1,5),W(1,21),GC_53,AMP(17))
      CALL VVS1_1(W(1,5),W(1,7),GC_72,MDL_MW, FK_MDL_WW,W(1,25))
      CALL FFV2_2(W(1,10),W(1,12),GC_100,ZERO, FK_ZERO,W(1,26))
C     Amplitude(s) for diagram number 18
      CALL FFV2_0(W(1,26),W(1,1),W(1,25),GC_100,AMP(18))
C     Amplitude(s) for diagram number 19
      CALL VVV1_0(W(1,24),W(1,12),W(1,25),-GC_3,AMP(19))
C     Amplitude(s) for diagram number 20
      CALL VVV1_0(W(1,12),W(1,25),W(1,21),GC_53,AMP(20))
      CALL FFV2_1(W(1,1),W(1,5),GC_100,ZERO, FK_ZERO,W(1,26))
      CALL FFV2_3(W(1,10),W(1,26),GC_100,MDL_MW, ZERO,W(1,27))
C     Amplitude(s) for diagram number 21
      CALL VVS1_0(W(1,12),W(1,27),W(1,7),GC_72,AMP(21))
      CALL FFV2_2(W(1,3),W(1,25),GC_100,ZERO, FK_ZERO,W(1,27))
C     Amplitude(s) for diagram number 22
      CALL FFV1_0(W(1,27),W(1,2),W(1,24),GC_1,AMP(22))
C     Amplitude(s) for diagram number 23
      CALL FFV2_3_0(W(1,27),W(1,2),W(1,21),GC_50,GC_58,AMP(23))
      CALL FFV2_1(W(1,2),W(1,25),GC_100,ZERO, FK_ZERO,W(1,10))
C     Amplitude(s) for diagram number 24
      CALL FFV1_0(W(1,3),W(1,10),W(1,24),GC_2,AMP(24))
C     Amplitude(s) for diagram number 25
      CALL FFV2_5_0(W(1,3),W(1,10),W(1,21),-GC_50,GC_58,AMP(25))
      CALL FFV2_1(W(1,2),W(1,5),GC_100,ZERO, FK_ZERO,W(1,24))
      CALL FFV2_5_3(W(1,3),W(1,24),-GC_50,GC_58,MDL_MZ, ZERO,W(1,28))
C     Amplitude(s) for diagram number 26
      CALL VVS1_0(W(1,21),W(1,28),W(1,7),GC_81,AMP(26))
      CALL FFV2_3(W(1,4),W(1,1),GC_100,MDL_MW, ZERO,W(1,21))
      CALL VVV1_3(W(1,21),W(1,6),GC_53,MDL_MZ, ZERO,W(1,29))
C     Amplitude(s) for diagram number 27
      CALL VVS1_0(W(1,29),W(1,22),W(1,7),GC_81,AMP(27))
      CALL VVS1_2(W(1,21),W(1,7),GC_72,MDL_MW, ZERO,W(1,30))
      CALL FFV1P0_3(W(1,20),W(1,2),GC_1,ZERO, FK_ZERO,W(1,31))
C     Amplitude(s) for diagram number 28
      CALL VVV1_0(W(1,31),W(1,30),W(1,6),-GC_3,AMP(28))
C     Amplitude(s) for diagram number 29
      CALL VVV1_0(W(1,30),W(1,6),W(1,22),GC_53,AMP(29))
      CALL FFV2_2(W(1,20),W(1,21),GC_100,ZERO, FK_ZERO,W(1,32))
C     Amplitude(s) for diagram number 30
      CALL FFV2_0(W(1,32),W(1,2),W(1,16),GC_100,AMP(30))
      CALL VVV1P0_1(W(1,21),W(1,16),-GC_3,ZERO, FK_ZERO,W(1,32))
C     Amplitude(s) for diagram number 31
      CALL FFV1_0(W(1,20),W(1,2),W(1,32),GC_1,AMP(31))
      CALL VVV1_3(W(1,21),W(1,16),GC_53,MDL_MZ, ZERO,W(1,33))
C     Amplitude(s) for diagram number 32
      CALL FFV2_3_0(W(1,20),W(1,2),W(1,33),GC_50,GC_58,AMP(32))
C     Amplitude(s) for diagram number 33
      CALL FFV2_0(W(1,20),W(1,14),W(1,30),GC_100,AMP(33))
      CALL VVV1_3(W(1,21),W(1,5),GC_53,MDL_MZ, ZERO,W(1,20))
C     Amplitude(s) for diagram number 34
      CALL VVS1_0(W(1,20),W(1,11),W(1,7),GC_81,AMP(34))
      CALL FFV1P0_3(W(1,9),W(1,2),GC_1,ZERO, FK_ZERO,W(1,34))
C     Amplitude(s) for diagram number 35
      CALL VVV1_0(W(1,34),W(1,30),W(1,5),-GC_3,AMP(35))
C     Amplitude(s) for diagram number 36
      CALL VVV1_0(W(1,30),W(1,5),W(1,11),GC_53,AMP(36))
      CALL FFV2_2(W(1,9),W(1,21),GC_100,ZERO, FK_ZERO,W(1,35))
C     Amplitude(s) for diagram number 37
      CALL FFV2_0(W(1,35),W(1,2),W(1,25),GC_100,AMP(37))
      CALL VVV1P0_1(W(1,21),W(1,25),-GC_3,ZERO, FK_ZERO,W(1,35))
C     Amplitude(s) for diagram number 38
      CALL FFV1_0(W(1,9),W(1,2),W(1,35),GC_1,AMP(38))
      CALL VVV1_3(W(1,21),W(1,25),GC_53,MDL_MZ, ZERO,W(1,36))
C     Amplitude(s) for diagram number 39
      CALL FFV2_3_0(W(1,9),W(1,2),W(1,36),GC_50,GC_58,AMP(39))
C     Amplitude(s) for diagram number 40
      CALL FFV2_0(W(1,9),W(1,24),W(1,30),GC_100,AMP(40))
      CALL VVS1_3(W(1,21),W(1,5),GC_72,MDL_MH, ZERO,W(1,9))
      CALL VVS1_3(W(1,12),W(1,6),GC_72,MDL_MH, ZERO,W(1,37))
C     Amplitude(s) for diagram number 41
      CALL SSS1_0(W(1,9),W(1,37),W(1,7),GC_69,AMP(41))
C     Amplitude(s) for diagram number 42
      CALL VVS1_0(W(1,20),W(1,13),W(1,7),GC_81,AMP(42))
      CALL VVV1P0_1(W(1,21),W(1,5),-GC_3,ZERO, FK_ZERO,W(1,38))
C     Amplitude(s) for diagram number 43
      CALL VVV1_0(W(1,38),W(1,15),W(1,6),-GC_3,AMP(43))
C     Amplitude(s) for diagram number 44
      CALL VVS1_0(W(1,15),W(1,6),W(1,9),GC_72,AMP(44))
C     Amplitude(s) for diagram number 45
      CALL VVV1_0(W(1,15),W(1,6),W(1,20),GC_53,AMP(45))
C     Amplitude(s) for diagram number 46
      CALL VVSS1_0(W(1,12),W(1,6),W(1,7),W(1,9),GC_34,AMP(46))
      CALL VVS1_3(W(1,21),W(1,6),GC_72,MDL_MH, ZERO,W(1,39))
      CALL VVS1_3(W(1,12),W(1,5),GC_72,MDL_MH, ZERO,W(1,40))
C     Amplitude(s) for diagram number 47
      CALL SSS1_0(W(1,39),W(1,40),W(1,7),GC_69,AMP(47))
C     Amplitude(s) for diagram number 48
      CALL VVS1_0(W(1,29),W(1,23),W(1,7),GC_81,AMP(48))
      CALL VVV1P0_1(W(1,21),W(1,6),-GC_3,ZERO, FK_ZERO,W(1,41))
C     Amplitude(s) for diagram number 49
      CALL VVV1_0(W(1,41),W(1,15),W(1,5),-GC_3,AMP(49))
C     Amplitude(s) for diagram number 50
      CALL VVS1_0(W(1,15),W(1,5),W(1,39),GC_72,AMP(50))
C     Amplitude(s) for diagram number 51
      CALL VVV1_0(W(1,15),W(1,5),W(1,29),GC_53,AMP(51))
C     Amplitude(s) for diagram number 52
      CALL VVSS1_0(W(1,12),W(1,5),W(1,7),W(1,39),GC_34,AMP(52))
      CALL VVV1P0_1(W(1,12),W(1,5),-GC_3,ZERO, FK_ZERO,W(1,42))
C     Amplitude(s) for diagram number 53
      CALL VVV1_0(W(1,42),W(1,30),W(1,6),-GC_3,AMP(53))
C     Amplitude(s) for diagram number 54
      CALL VVS1_0(W(1,30),W(1,6),W(1,40),GC_72,AMP(54))
C     Amplitude(s) for diagram number 55
      CALL VVV1_0(W(1,30),W(1,6),W(1,23),GC_53,AMP(55))
      CALL VVV1P0_1(W(1,12),W(1,6),-GC_3,ZERO, FK_ZERO,W(1,40))
C     Amplitude(s) for diagram number 56
      CALL VVV1_0(W(1,40),W(1,30),W(1,5),-GC_3,AMP(56))
C     Amplitude(s) for diagram number 57
      CALL VVS1_0(W(1,30),W(1,5),W(1,37),GC_72,AMP(57))
C     Amplitude(s) for diagram number 58
      CALL VVV1_0(W(1,30),W(1,5),W(1,13),GC_53,AMP(58))
C     Amplitude(s) for diagram number 59
      CALL VVVV2_0(W(1,12),W(1,30),W(1,5),W(1,6),GC_35,AMP(59))
      CALL VVVV2_1(W(1,21),W(1,5),W(1,6),GC_35,MDL_MW, ZERO,W(1,37))
C     Amplitude(s) for diagram number 60
      CALL VVS1_0(W(1,12),W(1,37),W(1,7),GC_72,AMP(60))
      CALL VVSS1_3(W(1,21),W(1,5),W(1,7),GC_34,MDL_MH, ZERO,W(1,37))
C     Amplitude(s) for diagram number 61
      CALL VVS1_0(W(1,12),W(1,6),W(1,37),GC_72,AMP(61))
      CALL VVSS1_3(W(1,21),W(1,6),W(1,7),GC_34,MDL_MH, ZERO,W(1,37))
C     Amplitude(s) for diagram number 62
      CALL VVS1_0(W(1,12),W(1,5),W(1,37),GC_72,AMP(62))
C     Amplitude(s) for diagram number 63
      CALL VVVV2_0(W(1,21),W(1,12),W(1,25),W(1,6),GC_35,AMP(63))
C     Amplitude(s) for diagram number 64
      CALL VVV1_0(W(1,35),W(1,12),W(1,6),-GC_3,AMP(64))
      CALL VVS1_3(W(1,21),W(1,25),GC_72,MDL_MH, ZERO,W(1,37))
C     Amplitude(s) for diagram number 65
      CALL VVS1_0(W(1,12),W(1,6),W(1,37),GC_72,AMP(65))
C     Amplitude(s) for diagram number 66
      CALL VVV1_0(W(1,12),W(1,6),W(1,36),GC_53,AMP(66))
C     Amplitude(s) for diagram number 67
      CALL VVV1_0(W(1,41),W(1,12),W(1,25),-GC_3,AMP(67))
C     Amplitude(s) for diagram number 68
      CALL VVS1_0(W(1,12),W(1,25),W(1,39),GC_72,AMP(68))
C     Amplitude(s) for diagram number 69
      CALL VVV1_0(W(1,12),W(1,25),W(1,29),GC_53,AMP(69))
C     Amplitude(s) for diagram number 70
      CALL VVVV2_0(W(1,21),W(1,12),W(1,5),W(1,16),GC_35,AMP(70))
C     Amplitude(s) for diagram number 71
      CALL VVV1_0(W(1,38),W(1,12),W(1,16),-GC_3,AMP(71))
C     Amplitude(s) for diagram number 72
      CALL VVS1_0(W(1,12),W(1,16),W(1,9),GC_72,AMP(72))
C     Amplitude(s) for diagram number 73
      CALL VVV1_0(W(1,12),W(1,16),W(1,20),GC_53,AMP(73))
C     Amplitude(s) for diagram number 74
      CALL VVV1_0(W(1,32),W(1,12),W(1,5),-GC_3,AMP(74))
      CALL VVS1_3(W(1,21),W(1,16),GC_72,MDL_MH, ZERO,W(1,9))
C     Amplitude(s) for diagram number 75
      CALL VVS1_0(W(1,12),W(1,5),W(1,9),GC_72,AMP(75))
C     Amplitude(s) for diagram number 76
      CALL VVV1_0(W(1,12),W(1,5),W(1,33),GC_53,AMP(76))
C     Amplitude(s) for diagram number 77
      CALL FFV1_0(W(1,27),W(1,2),W(1,41),GC_1,AMP(77))
C     Amplitude(s) for diagram number 78
      CALL FFV2_3_0(W(1,27),W(1,2),W(1,29),GC_50,GC_58,AMP(78))
C     Amplitude(s) for diagram number 79
      CALL FFV1_0(W(1,3),W(1,10),W(1,41),GC_2,AMP(79))
C     Amplitude(s) for diagram number 80
      CALL FFV2_5_0(W(1,3),W(1,10),W(1,29),-GC_50,GC_58,AMP(80))
C     Amplitude(s) for diagram number 81
      CALL FFV1_0(W(1,3),W(1,14),W(1,35),GC_2,AMP(81))
C     Amplitude(s) for diagram number 82
      CALL FFV2_5_0(W(1,3),W(1,14),W(1,36),-GC_50,GC_58,AMP(82))
      CALL FFV2_1(W(1,14),W(1,21),GC_100,ZERO, FK_ZERO,W(1,36))
C     Amplitude(s) for diagram number 83
      CALL FFV2_0(W(1,3),W(1,36),W(1,25),GC_100,AMP(83))
C     Amplitude(s) for diagram number 84
      CALL VVS1_0(W(1,29),W(1,28),W(1,7),GC_81,AMP(84))
      CALL FFV1P0_3(W(1,3),W(1,24),GC_2,ZERO, FK_ZERO,W(1,29))
C     Amplitude(s) for diagram number 85
      CALL VVV1_0(W(1,29),W(1,30),W(1,6),-GC_3,AMP(85))
C     Amplitude(s) for diagram number 86
      CALL VVV1_0(W(1,30),W(1,6),W(1,28),GC_53,AMP(86))
      CALL FFV2_1(W(1,24),W(1,21),GC_100,ZERO, FK_ZERO,W(1,36))
C     Amplitude(s) for diagram number 87
      CALL FFV2_0(W(1,3),W(1,36),W(1,16),GC_100,AMP(87))
C     Amplitude(s) for diagram number 88
      CALL FFV1_0(W(1,3),W(1,24),W(1,32),GC_2,AMP(88))
C     Amplitude(s) for diagram number 89
      CALL FFV2_5_0(W(1,3),W(1,24),W(1,33),-GC_50,GC_58,AMP(89))
C     Amplitude(s) for diagram number 90
      CALL FFV1_0(W(1,18),W(1,2),W(1,38),GC_1,AMP(90))
C     Amplitude(s) for diagram number 91
      CALL FFV2_3_0(W(1,18),W(1,2),W(1,20),GC_50,GC_58,AMP(91))
C     Amplitude(s) for diagram number 92
      CALL FFV1_0(W(1,3),W(1,8),W(1,38),GC_2,AMP(92))
C     Amplitude(s) for diagram number 93
      CALL FFV2_5_0(W(1,3),W(1,8),W(1,20),-GC_50,GC_58,AMP(93))
C     Amplitude(s) for diagram number 94
      CALL VVS1_0(W(1,20),W(1,19),W(1,7),GC_81,AMP(94))
      CALL FFV1P0_3(W(1,3),W(1,14),GC_2,ZERO, FK_ZERO,W(1,20))
C     Amplitude(s) for diagram number 95
      CALL VVV1_0(W(1,20),W(1,30),W(1,5),-GC_3,AMP(95))
C     Amplitude(s) for diagram number 96
      CALL VVV1_0(W(1,30),W(1,5),W(1,19),GC_53,AMP(96))
      CALL FFV2_2(W(1,4),W(1,16),GC_100,ZERO, FK_ZERO,W(1,30))
C     Amplitude(s) for diagram number 97
      CALL FFV1_0(W(1,30),W(1,1),W(1,31),GC_1,AMP(97))
C     Amplitude(s) for diagram number 98
      CALL FFV2_3_0(W(1,30),W(1,1),W(1,22),GC_50,GC_58,AMP(98))
      CALL FFV2_1(W(1,1),W(1,16),GC_100,ZERO, FK_ZERO,W(1,14))
C     Amplitude(s) for diagram number 99
      CALL FFV1_0(W(1,4),W(1,14),W(1,31),GC_2,AMP(99))
C     Amplitude(s) for diagram number 100
      CALL FFV2_5_0(W(1,4),W(1,14),W(1,22),-GC_50,GC_58,AMP(100))
      CALL FFV2_5_3(W(1,4),W(1,17),-GC_50,GC_58,MDL_MZ, ZERO,W(1,31))
C     Amplitude(s) for diagram number 101
      CALL VVS1_0(W(1,31),W(1,22),W(1,7),GC_81,AMP(101))
      CALL FFV2_2(W(1,4),W(1,25),GC_100,ZERO, FK_ZERO,W(1,22))
C     Amplitude(s) for diagram number 102
      CALL FFV1_0(W(1,22),W(1,1),W(1,34),GC_1,AMP(102))
C     Amplitude(s) for diagram number 103
      CALL FFV2_3_0(W(1,22),W(1,1),W(1,11),GC_50,GC_58,AMP(103))
      CALL FFV2_1(W(1,1),W(1,25),GC_100,ZERO, FK_ZERO,W(1,38))
C     Amplitude(s) for diagram number 104
      CALL FFV1_0(W(1,4),W(1,38),W(1,34),GC_2,AMP(104))
C     Amplitude(s) for diagram number 105
      CALL FFV2_5_0(W(1,4),W(1,38),W(1,11),-GC_50,GC_58,AMP(105))
      CALL FFV2_5_3(W(1,4),W(1,26),-GC_50,GC_58,MDL_MZ, ZERO,W(1,34))
C     Amplitude(s) for diagram number 106
      CALL VVS1_0(W(1,34),W(1,11),W(1,7),GC_81,AMP(106))
C     Amplitude(s) for diagram number 107
      CALL FFV1_0(W(1,22),W(1,1),W(1,40),GC_1,AMP(107))
C     Amplitude(s) for diagram number 108
      CALL FFV2_3_0(W(1,22),W(1,1),W(1,13),GC_50,GC_58,AMP(108))
C     Amplitude(s) for diagram number 109
      CALL FFV1_0(W(1,4),W(1,38),W(1,40),GC_2,AMP(109))
C     Amplitude(s) for diagram number 110
      CALL FFV2_5_0(W(1,4),W(1,38),W(1,13),-GC_50,GC_58,AMP(110))
C     Amplitude(s) for diagram number 111
      CALL FFV2_0(W(1,22),W(1,17),W(1,12),GC_100,AMP(111))
      CALL FFV1P0_3(W(1,4),W(1,17),GC_2,ZERO, FK_ZERO,W(1,40))
C     Amplitude(s) for diagram number 112
      CALL VVV1_0(W(1,40),W(1,12),W(1,25),-GC_3,AMP(112))
C     Amplitude(s) for diagram number 113
      CALL VVV1_0(W(1,12),W(1,25),W(1,31),GC_53,AMP(113))
C     Amplitude(s) for diagram number 114
      CALL VVS1_0(W(1,34),W(1,13),W(1,7),GC_81,AMP(114))
      CALL FFV1P0_3(W(1,4),W(1,26),GC_2,ZERO, FK_ZERO,W(1,13))
C     Amplitude(s) for diagram number 115
      CALL VVV1_0(W(1,13),W(1,15),W(1,6),-GC_3,AMP(115))
C     Amplitude(s) for diagram number 116
      CALL VVV1_0(W(1,15),W(1,6),W(1,34),GC_53,AMP(116))
C     Amplitude(s) for diagram number 117
      CALL VVV1_0(W(1,13),W(1,12),W(1,16),-GC_3,AMP(117))
C     Amplitude(s) for diagram number 118
      CALL VVV1_0(W(1,12),W(1,16),W(1,34),GC_53,AMP(118))
C     Amplitude(s) for diagram number 119
      CALL FFV2_0(W(1,30),W(1,26),W(1,12),GC_100,AMP(119))
C     Amplitude(s) for diagram number 120
      CALL FFV1_0(W(1,30),W(1,1),W(1,42),GC_1,AMP(120))
C     Amplitude(s) for diagram number 121
      CALL FFV2_3_0(W(1,30),W(1,1),W(1,23),GC_50,GC_58,AMP(121))
C     Amplitude(s) for diagram number 122
      CALL FFV1_0(W(1,4),W(1,14),W(1,42),GC_2,AMP(122))
C     Amplitude(s) for diagram number 123
      CALL FFV2_5_0(W(1,4),W(1,14),W(1,23),-GC_50,GC_58,AMP(123))
C     Amplitude(s) for diagram number 124
      CALL VVS1_0(W(1,31),W(1,23),W(1,7),GC_81,AMP(124))
C     Amplitude(s) for diagram number 125
      CALL VVV1_0(W(1,40),W(1,15),W(1,5),-GC_3,AMP(125))
C     Amplitude(s) for diagram number 126
      CALL VVV1_0(W(1,15),W(1,5),W(1,31),GC_53,AMP(126))
C     Amplitude(s) for diagram number 127
      CALL FFV1_0(W(1,27),W(1,2),W(1,40),GC_1,AMP(127))
C     Amplitude(s) for diagram number 128
      CALL FFV2_3_0(W(1,27),W(1,2),W(1,31),GC_50,GC_58,AMP(128))
C     Amplitude(s) for diagram number 129
      CALL FFV1_0(W(1,3),W(1,10),W(1,40),GC_2,AMP(129))
C     Amplitude(s) for diagram number 130
      CALL FFV2_5_0(W(1,3),W(1,10),W(1,31),-GC_50,GC_58,AMP(130))
C     Amplitude(s) for diagram number 131
      CALL FFV1_0(W(1,22),W(1,1),W(1,20),GC_1,AMP(131))
C     Amplitude(s) for diagram number 132
      CALL FFV2_3_0(W(1,22),W(1,1),W(1,19),GC_50,GC_58,AMP(132))
C     Amplitude(s) for diagram number 133
      CALL FFV1_0(W(1,4),W(1,38),W(1,20),GC_2,AMP(133))
C     Amplitude(s) for diagram number 134
      CALL FFV2_5_0(W(1,4),W(1,38),W(1,19),-GC_50,GC_58,AMP(134))
C     Amplitude(s) for diagram number 135
      CALL FFV1_0(W(1,18),W(1,2),W(1,13),GC_1,AMP(135))
C     Amplitude(s) for diagram number 136
      CALL FFV2_3_0(W(1,18),W(1,2),W(1,34),GC_50,GC_58,AMP(136))
C     Amplitude(s) for diagram number 137
      CALL FFV1_0(W(1,3),W(1,8),W(1,13),GC_2,AMP(137))
C     Amplitude(s) for diagram number 138
      CALL FFV2_5_0(W(1,3),W(1,8),W(1,34),-GC_50,GC_58,AMP(138))
C     Amplitude(s) for diagram number 139
      CALL VVS1_0(W(1,34),W(1,19),W(1,7),GC_81,AMP(139))
C     Amplitude(s) for diagram number 140
      CALL FFV1_0(W(1,30),W(1,1),W(1,29),GC_1,AMP(140))
C     Amplitude(s) for diagram number 141
      CALL FFV2_3_0(W(1,30),W(1,1),W(1,28),GC_50,GC_58,AMP(141))
C     Amplitude(s) for diagram number 142
      CALL FFV1_0(W(1,4),W(1,14),W(1,29),GC_2,AMP(142))
C     Amplitude(s) for diagram number 143
      CALL FFV2_5_0(W(1,4),W(1,14),W(1,28),-GC_50,GC_58,AMP(143))
C     Amplitude(s) for diagram number 144
      CALL VVS1_0(W(1,31),W(1,28),W(1,7),GC_81,AMP(144))

      JAMP(:,:) = (0D0,0D0)
C     JAMPs contributing to orders ALL_ORDERS=1
      JAMP(1,1) = AMP(1)+AMP(2)+AMP(3)+AMP(4)+AMP(5)+AMP(6)+AMP(7)
     $ +AMP(8)+AMP(9)+AMP(10)+AMP(11)+AMP(12)+AMP(13)+AMP(14)+AMP(15)
     $ +AMP(16)+AMP(17)+AMP(18)+AMP(19)+AMP(20)+AMP(21)+AMP(22)+AMP(23)
     $ +AMP(24)+AMP(25)+AMP(26)+AMP(27)+AMP(28)+AMP(29)+AMP(30)+AMP(31)
     $ +AMP(32)+AMP(33)+AMP(34)+AMP(35)+AMP(36)+AMP(37)+AMP(38)+AMP(39)
     $ +AMP(40)+AMP(41)+AMP(42)+AMP(43)+AMP(44)+AMP(45)+AMP(46)+AMP(47)
     $ +AMP(48)+AMP(49)+AMP(50)+AMP(51)+AMP(52)+AMP(53)+AMP(54)+AMP(55)
     $ +AMP(56)+AMP(57)+AMP(58)+AMP(59)+AMP(60)+AMP(61)+AMP(62)+AMP(63)
     $ +AMP(64)+AMP(65)+AMP(66)+AMP(67)+AMP(68)+AMP(69)+AMP(70)+AMP(71)
     $ +AMP(72)+AMP(73)+AMP(74)+AMP(75)+AMP(76)+AMP(77)+AMP(78)+AMP(79)
     $ +AMP(80)+AMP(81)+AMP(82)+AMP(83)+AMP(84)+AMP(85)+AMP(86)+AMP(87)
     $ +AMP(88)+AMP(89)+AMP(90)+AMP(91)+AMP(92)+AMP(93)+AMP(94)+AMP(95)
     $ +AMP(96)+AMP(97)+AMP(98)+AMP(99)+AMP(100)+AMP(101)+AMP(102)
     $ +AMP(103)+AMP(104)+AMP(105)+AMP(106)+AMP(107)+AMP(108)+AMP(109)
     $ +AMP(110)+AMP(111)+AMP(112)+AMP(113)+AMP(114)+AMP(115)+AMP(116)
     $ +AMP(117)+AMP(118)+AMP(119)+AMP(120)+AMP(121)+AMP(122)+AMP(123)
     $ +AMP(124)+AMP(125)+AMP(126)+AMP(127)+AMP(128)+AMP(129)+AMP(130)
     $ +AMP(131)+AMP(132)+AMP(133)+AMP(134)+AMP(135)+AMP(136)+AMP(137)
     $ +AMP(138)+AMP(139)+AMP(140)+AMP(141)+AMP(142)+AMP(143)+AMP(144)

      IF(INIT_MODE)THEN
        DO I=1, NGRAPHS
          IF (AMP(I).NE.0) THEN
            ZEROAMP_14(IHEL,I) = .FALSE.
          ENDIF
        ENDDO
      ENDIF

      MATRIX14 = 0.D0
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
            ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
          ENDDO
          DO N = 1, NAMPSO

            MATRIX14 = MATRIX14 + ZTEMP*DCONJG(JAMP(I,N))

          ENDDO
        ENDDO
      ENDDO

      IF(SDE_STRAT.EQ.1)THEN
        AMP2(139)=AMP2(139)+AMP(139)*DCONJG(AMP(139))
        AMP2(114)=AMP2(114)+AMP(114)*DCONJG(AMP(114))
        AMP2(115)=AMP2(115)+(AMP(115)+AMP(116))*DCONJG(AMP(115)
     $   +AMP(116))
        AMP2(119)=AMP2(119)+AMP(119)*DCONJG(AMP(119))
        AMP2(117)=AMP2(117)+(AMP(117)+AMP(118))*DCONJG(AMP(117)
     $   +AMP(118))
        AMP2(21)=AMP2(21)+AMP(21)*DCONJG(AMP(21))
        AMP2(137)=AMP2(137)+(AMP(137)+AMP(138))*DCONJG(AMP(137)
     $   +AMP(138))
        AMP2(135)=AMP2(135)+(AMP(135)+AMP(136))*DCONJG(AMP(135)
     $   +AMP(136))
        AMP2(106)=AMP2(106)+AMP(106)*DCONJG(AMP(106))
        AMP2(144)=AMP2(144)+AMP(144)*DCONJG(AMP(144))
        AMP2(124)=AMP2(124)+AMP(124)*DCONJG(AMP(124))
        AMP2(125)=AMP2(125)+(AMP(125)+AMP(126))*DCONJG(AMP(125)
     $   +AMP(126))
        AMP2(111)=AMP2(111)+AMP(111)*DCONJG(AMP(111))
        AMP2(112)=AMP2(112)+(AMP(112)+AMP(113))*DCONJG(AMP(112)
     $   +AMP(113))
        AMP2(8)=AMP2(8)+AMP(8)*DCONJG(AMP(8))
        AMP2(129)=AMP2(129)+(AMP(129)+AMP(130))*DCONJG(AMP(129)
     $   +AMP(130))
        AMP2(127)=AMP2(127)+(AMP(127)+AMP(128))*DCONJG(AMP(127)
     $   +AMP(128))
        AMP2(101)=AMP2(101)+AMP(101)*DCONJG(AMP(101))
        AMP2(84)=AMP2(84)+AMP(84)*DCONJG(AMP(84))
        AMP2(85)=AMP2(85)+(AMP(85)+AMP(86))*DCONJG(AMP(85)+AMP(86))
        AMP2(87)=AMP2(87)+AMP(87)*DCONJG(AMP(87))
        AMP2(88)=AMP2(88)+(AMP(88)+AMP(89))*DCONJG(AMP(88)+AMP(89))
        AMP2(40)=AMP2(40)+AMP(40)*DCONJG(AMP(40))
        AMP2(94)=AMP2(94)+AMP(94)*DCONJG(AMP(94))
        AMP2(95)=AMP2(95)+(AMP(95)+AMP(96))*DCONJG(AMP(95)+AMP(96))
        AMP2(83)=AMP2(83)+AMP(83)*DCONJG(AMP(83))
        AMP2(81)=AMP2(81)+(AMP(81)+AMP(82))*DCONJG(AMP(81)+AMP(82))
        AMP2(33)=AMP2(33)+AMP(33)*DCONJG(AMP(33))
        AMP2(41)=AMP2(41)+(AMP(41)+AMP(42))*DCONJG(AMP(41)+AMP(42))
        AMP2(43)=AMP2(43)+(AMP(43)+AMP(44)+AMP(45))*DCONJG(AMP(43)
     $   +AMP(44)+AMP(45))
        AMP2(47)=AMP2(47)+(AMP(47)+AMP(48))*DCONJG(AMP(47)+AMP(48))
        AMP2(49)=AMP2(49)+(AMP(49)+AMP(50)+AMP(51))*DCONJG(AMP(49)
     $   +AMP(50)+AMP(51))
        AMP2(53)=AMP2(53)+(AMP(53)+AMP(54)+AMP(55))*DCONJG(AMP(53)
     $   +AMP(54)+AMP(55))
        AMP2(56)=AMP2(56)+(AMP(56)+AMP(57)+AMP(58))*DCONJG(AMP(56)
     $   +AMP(57)+AMP(58))
        AMP2(64)=AMP2(64)+(AMP(64)+AMP(65)+AMP(66))*DCONJG(AMP(64)
     $   +AMP(65)+AMP(66))
        AMP2(67)=AMP2(67)+(AMP(67)+AMP(68)+AMP(69))*DCONJG(AMP(67)
     $   +AMP(68)+AMP(69))
        AMP2(71)=AMP2(71)+(AMP(71)+AMP(72)+AMP(73))*DCONJG(AMP(71)
     $   +AMP(72)+AMP(73))
        AMP2(74)=AMP2(74)+(AMP(74)+AMP(75)+AMP(76))*DCONJG(AMP(74)
     $   +AMP(75)+AMP(76))
        AMP2(79)=AMP2(79)+(AMP(79)+AMP(80))*DCONJG(AMP(79)+AMP(80))
        AMP2(77)=AMP2(77)+(AMP(77)+AMP(78))*DCONJG(AMP(77)+AMP(78))
        AMP2(38)=AMP2(38)+(AMP(38)+AMP(39))*DCONJG(AMP(38)+AMP(39))
        AMP2(37)=AMP2(37)+AMP(37)*DCONJG(AMP(37))
        AMP2(27)=AMP2(27)+AMP(27)*DCONJG(AMP(27))
        AMP2(28)=AMP2(28)+(AMP(28)+AMP(29))*DCONJG(AMP(28)+AMP(29))
        AMP2(30)=AMP2(30)+AMP(30)*DCONJG(AMP(30))
        AMP2(31)=AMP2(31)+(AMP(31)+AMP(32))*DCONJG(AMP(31)+AMP(32))
        AMP2(92)=AMP2(92)+(AMP(92)+AMP(93))*DCONJG(AMP(92)+AMP(93))
        AMP2(90)=AMP2(90)+(AMP(90)+AMP(91))*DCONJG(AMP(90)+AMP(91))
        AMP2(34)=AMP2(34)+AMP(34)*DCONJG(AMP(34))
        AMP2(35)=AMP2(35)+(AMP(35)+AMP(36))*DCONJG(AMP(35)+AMP(36))
        AMP2(142)=AMP2(142)+(AMP(142)+AMP(143))*DCONJG(AMP(142)
     $   +AMP(143))
        AMP2(140)=AMP2(140)+(AMP(140)+AMP(141))*DCONJG(AMP(140)
     $   +AMP(141))
        AMP2(26)=AMP2(26)+AMP(26)*DCONJG(AMP(26))
        AMP2(133)=AMP2(133)+(AMP(133)+AMP(134))*DCONJG(AMP(133)
     $   +AMP(134))
        AMP2(131)=AMP2(131)+(AMP(131)+AMP(132))*DCONJG(AMP(131)
     $   +AMP(132))
        AMP2(13)=AMP2(13)+AMP(13)*DCONJG(AMP(13))
        AMP2(109)=AMP2(109)+(AMP(109)+AMP(110))*DCONJG(AMP(109)
     $   +AMP(110))
        AMP2(107)=AMP2(107)+(AMP(107)+AMP(108))*DCONJG(AMP(107)
     $   +AMP(108))
        AMP2(18)=AMP2(18)+AMP(18)*DCONJG(AMP(18))
        AMP2(19)=AMP2(19)+(AMP(19)+AMP(20))*DCONJG(AMP(19)+AMP(20))
        AMP2(2)=AMP2(2)+AMP(2)*DCONJG(AMP(2))
        AMP2(3)=AMP2(3)+(AMP(3)+AMP(4))*DCONJG(AMP(3)+AMP(4))
        AMP2(6)=AMP2(6)+(AMP(6)+AMP(7))*DCONJG(AMP(6)+AMP(7))
        AMP2(5)=AMP2(5)+AMP(5)*DCONJG(AMP(5))
        AMP2(122)=AMP2(122)+(AMP(122)+AMP(123))*DCONJG(AMP(122)
     $   +AMP(123))
        AMP2(120)=AMP2(120)+(AMP(120)+AMP(121))*DCONJG(AMP(120)
     $   +AMP(121))
        AMP2(15)=AMP2(15)+AMP(15)*DCONJG(AMP(15))
        AMP2(16)=AMP2(16)+(AMP(16)+AMP(17))*DCONJG(AMP(16)+AMP(17))
        AMP2(24)=AMP2(24)+(AMP(24)+AMP(25))*DCONJG(AMP(24)+AMP(25))
        AMP2(22)=AMP2(22)+(AMP(22)+AMP(23))*DCONJG(AMP(22)+AMP(23))
        AMP2(104)=AMP2(104)+(AMP(104)+AMP(105))*DCONJG(AMP(104)
     $   +AMP(105))
        AMP2(102)=AMP2(102)+(AMP(102)+AMP(103))*DCONJG(AMP(102)
     $   +AMP(103))
        AMP2(11)=AMP2(11)+(AMP(11)+AMP(12))*DCONJG(AMP(11)+AMP(12))
        AMP2(9)=AMP2(9)+(AMP(9)+AMP(10))*DCONJG(AMP(9)+AMP(10))
        AMP2(1)=AMP2(1)+AMP(1)*DCONJG(AMP(1))
        AMP2(99)=AMP2(99)+(AMP(99)+AMP(100))*DCONJG(AMP(99)+AMP(100))
        AMP2(97)=AMP2(97)+(AMP(97)+AMP(98))*DCONJG(AMP(97)+AMP(98))
        AMP2(14)=AMP2(14)+AMP(14)*DCONJG(AMP(14))
      ENDIF

      DO I = 1, NCOLOR
        DO M = 1, NAMPSO
          DO N = 1, NAMPSO

            JAMP2(I)=JAMP2(I)+DABS(DBLE(JAMP(I,M)*DCONJG(JAMP(I,N))))

          ENDDO
        ENDDO
      ENDDO

      END

      SUBROUTINE PRINT_ZERO_AMP_14()

      IMPLICIT NONE
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=144)

      INTEGER    NCOMB
      PARAMETER (NCOMB=1024)

      LOGICAL ZEROAMP_14(NCOMB, NGRAPHS)
      COMMON/TO_ZEROAMP_14/ZEROAMP_14

      INTEGER I,J
      LOGICAL ALL_FALSE

      DO I=1, NGRAPHS
        ALL_FALSE = .TRUE.
        DO J=1,NCOMB
          IF (.NOT.ZEROAMP_14(J, I)) THEN
            ALL_FALSE = .FALSE.
            EXIT
          ENDIF
        ENDDO
        IF (ALL_FALSE) THEN
          WRITE(*,*) 'Amplitude/ZEROAMP:', 14, I
        ELSE
          DO J=1,NCOMB
            IF (ZEROAMP_14(J, I)) THEN
              WRITE(*,*) 'HEL/ZEROAMP:', 14, J  , I
            ENDIF
          ENDDO
        ENDIF
      ENDDO

      RETURN
      END
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX14(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  1) /    1/
      COMMON/AMPSPLITORDERS14/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS14
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX14=SOINDEX_FOR_SQUARED_ORDERS14(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS14(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,I),I=  1,  1) /    2/
      COMMON/SQPLITORDERS14/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS14 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function'
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS14'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN14(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX14(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS14/SQPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX14'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX14(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS14/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_ORDERS_FOR_AMPSOINDEX14'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS14(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS14/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS14 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS14'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

